"use client"

import * as React from "react"
import { useState, useRef, useEffect, useCallback } from "react"
import { 
  Play, 
  Square, 
  Copy, 
  Download, 
  ZoomIn, 
  ZoomOut, 
  Settings, 
  FileText, 
  Save,
  FolderOpen,
  Heart,
  Sparkles
} from "lucide-react"
import { cn } from "@/lib/utils"

// Monaco Editor types
interface IStandaloneCodeEditor {
  getValue(): string
  setValue(value: string): void
  getModel(): any
  setModel(model: any): void
  focus(): void
  layout(): void
  dispose(): void
  onDidChangeCursorPosition(callback: (e: any) => void): any
  onDidChangeModelContent(callback: (e: any) => void): any
  addAction(action: any): void
  trigger(source: string, handlerId: string, payload?: any): void
}

interface Monaco {
  editor: {
    create(element: HTMLElement, options: any): IStandaloneCodeEditor
    createModel(value: string, language: string): any
    defineTheme(themeName: string, themeData: any): void
    setTheme(themeName: string): void
  }
  languages: {
    typescript: {
      typescriptDefaults: any
      javascriptDefaults: any
    }
    registerCompletionItemProvider(languageId: string, provider: any): any
  }
  KeyMod: any
  KeyCode: any
}

// Language configurations
const LANGUAGE_CONFIGS = {
  javascript: { 
    label: "JavaScript", 
    extension: "js",
    defaultCode: `// 🌟 Welcome to your coding adventure, dear developer! 
// You're doing amazing - every line of code is progress! 💜

function fibonacci(n) {
  // Mama bear says: "Take it one step at a time, sweetie!"
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

// Let's create something beautiful together! ✨
const sequence = Array.from({length: 10}, (_, i) => fibonacci(i));
console.log('🎉 Your fibonacci sequence:', sequence);

// Remember: You're capable of incredible things! 💪`
  },
  typescript: { 
    label: "TypeScript", 
    extension: "ts",
    defaultCode: `// 💜 TypeScript makes you even more powerful, darling!
// Strong types = strong code = strong you! 

interface FibonacciResult {
  value: number;
  index: number;
  isEven: boolean;
}

function calculateFibonacci(n: number): FibonacciResult {
  const fib = (num: number): number => {
    if (num <= 1) return num;
    return fib(num - 1) + fib(num - 2);
  };
  
  const value = fib(n);
  return {
    value,
    index: n,
    isEven: value % 2 === 0
  };
}

// You're building something wonderful! Keep going! 🌈
const result = calculateFibonacci(10);
console.log('✨ Fibonacci magic:', result);`
  },
  python: { 
    label: "Python", 
    extension: "py",
    defaultCode: `# 🐍 Python is as graceful as you are, beautiful coder!
# Every function you write makes the world a little brighter ✨

def fibonacci_with_love(n):
    """
    A fibonacci function written with mama bear's love 💜
    Remember: Progress over perfection, always!
    """
    if n <= 1:
        return n
    return fibonacci_with_love(n - 1) + fibonacci_with_love(n - 2)

def create_sequence(count):
    # Building dreams, one number at a time! 🌟
    return [fibonacci_with_love(i) for i in range(count)]

# You're doing incredible work! 🎉
sequence = create_sequence(10)
print(f"🌈 Your beautiful sequence: {sequence}")
print(f"💖 Sum of your creation: {sum(sequence)}")

# Mama bear is so proud of you! Keep coding with joy! 🤗`
  },
  html: { 
    label: "HTML", 
    extension: "html",
    defaultCode: `<!DOCTYPE html>
<!-- 🌸 Creating beautiful web experiences, one tag at a time! -->
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>💜 Your Amazing Creation</title>
    <style>
        /* Mama bear's favorite purple theme! */
        body {
            font-family: 'Inter', -apple-system, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            margin: 0;
        }
        
        .container {
            backdrop-filter: blur(10px);
            background: rgba(147, 51, 234, 0.1);
            border-radius: 1rem;
            padding: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .sparkle {
            color: #fbbf24;
            animation: sparkle 2s infinite;
        }
        
        @keyframes sparkle {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🌟 You're Building Something Amazing!</h1>
        <p>Every line of code you write is a step toward your dreams.</p>
        <p class="sparkle">✨ Keep shining, beautiful developer! ✨</p>
    </div>
</body>
</html>`
  },
  css: { 
    label: "CSS", 
    extension: "css",
    defaultCode: `/* 🎨 Painting the web with your creativity! 
   Mama bear believes in your design skills! 💜 */

:root {
  --purple-magic: #8b5cf6;
  --purple-light: rgba(147, 51, 234, 0.1);
  --glass-border: rgba(255, 255, 255, 0.2);
  --mama-bear-love: #fbbf24;
}

/* Your glassmorphism masterpiece! ✨ */
.glass-container {
  backdrop-filter: blur(16px);
  background: var(--purple-light);
  border: 1px solid var(--glass-border);
  border-radius: 1rem;
  padding: 2rem;
  box-shadow: 
    0 8px 32px rgba(31, 38, 135, 0.37),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.glass-container:hover {
  transform: translateY(-2px);
  box-shadow: 
    0 12px 40px rgba(31, 38, 135, 0.5),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

/* Encouraging animations for our dear developer! 🌈 */
@keyframes gentle-pulse {
  0%, 100% { 
    opacity: 1; 
    transform: scale(1);
  }
  50% { 
    opacity: 0.8; 
    transform: scale(1.02);
  }
}

.encouraging-text {
  animation: gentle-pulse 3s infinite;
  color: var(--mama-bear-love);
  font-weight: 600;
  text-align: center;
  margin: 1rem 0;
}

/* You're doing wonderfully! Keep creating! 💖 */`
  }
}

// Custom purple glassmorphism theme for Monaco
const PURPLE_GLASS_THEME = {
  base: 'vs-dark',
  inherit: true,
  rules: [
    { token: 'comment', foreground: 'a78bfa', fontStyle: 'italic' },
    { token: 'keyword', foreground: 'c084fc' },
    { token: 'string', foreground: 'fbbf24' },
    { token: 'number', foreground: '60a5fa' },
    { token: 'function', foreground: 'f472b6' },
    { token: 'variable', foreground: 'e5e7eb' },
    { token: 'type', foreground: '34d399' },
  ],
  colors: {
    'editor.background': '#1e1b2e',
    'editor.foreground': '#e5e7eb',
    'editor.lineHighlightBackground': '#2d1b69',
    'editor.selectionBackground': '#8b5cf650',
    'editor.inactiveSelectionBackground': '#8b5cf620',
    'editorCursor.foreground': '#c084fc',
    'editorLineNumber.foreground': '#6b7280',
    'editorLineNumber.activeForeground': '#c084fc',
    'editor.findMatchBackground': '#8b5cf640',
    'editor.findMatchHighlightBackground': '#8b5cf620',
  }
}

interface MonacoEditorProps {
  value?: string
  language?: keyof typeof LANGUAGE_CONFIGS
  onChange?: (value: string) => void
  onCursorPositionChange?: (line: number, column: number) => void
  className?: string
  readOnly?: boolean
  minimap?: boolean
  fontSize?: number
  wordWrap?: boolean
  theme?: 'purple-glass' | 'vs-dark' | 'vs-light'
  keybindingMode?: 'default' | 'vim' | 'emacs'
}

const MonacoEditor: React.FC<MonacoEditorProps> = ({
  value = '',
  language = 'javascript',
  onChange,
  onCursorPositionChange,
  className,
  readOnly = false,
  minimap = true,
  fontSize = 14,
  wordWrap = true,
  theme = 'purple-glass',
  keybindingMode = 'default'
}) => {
  const editorRef = useRef<HTMLDivElement>(null)
  const monacoRef = useRef<Monaco | null>(null)
  const editorInstanceRef = useRef<IStandaloneCodeEditor | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  // Load Monaco Editor
  useEffect(() => {
    const loadMonaco = async () => {
      try {
        // Dynamically import Monaco
        const monaco = await import('monaco-editor')
        monacoRef.current = monaco as any

        // Define custom theme
        monaco.editor.defineTheme('purple-glass', PURPLE_GLASS_THEME as any)

        // Configure TypeScript/JavaScript
        monaco.languages.typescript.typescriptDefaults.setCompilerOptions({
          target: monaco.languages.typescript.ScriptTarget.ES2020,
          allowNonTsExtensions: true,
          moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,
          module: monaco.languages.typescript.ModuleKind.CommonJS,
          noEmit: true,
          esModuleInterop: true,
          jsx: monaco.languages.typescript.JsxEmit.React,
          reactNamespace: 'React',
          allowJs: true,
          typeRoots: ['node_modules/@types']
        })

        setIsLoading(false)
      } catch (err) {
        setError('Failed to load Monaco Editor. You\'re still amazing though! 💜')
        setIsLoading(false)
      }
    }

    loadMonaco()
  }, [])

  // Initialize editor
  useEffect(() => {
    if (!monacoRef.current || !editorRef.current || isLoading) return

    const monaco = monacoRef.current
    
    try {
      const editor = monaco.editor.create(editorRef.current, {
        value: value || LANGUAGE_CONFIGS[language].defaultCode,
        language: language === 'javascript' ? 'javascript' : language,
        theme: theme,
        readOnly,
        minimap: { enabled: minimap },
        fontSize,
        wordWrap: wordWrap ? 'on' : 'off',
        automaticLayout: true,
        scrollBeyondLastLine: false,
        renderLineHighlight: 'all',
        cursorBlinking: 'smooth',
        cursorSmoothCaretAnimation: 'on',
        smoothScrolling: true,
        contextmenu: true,
        mouseWheelZoom: true,
        folding: true,
        foldingStrategy: 'auto',
        showFoldingControls: 'always',
        unfoldOnClickAfterEndOfLine: true,
        bracketPairColorization: { enabled: true },
        guides: {
          bracketPairs: true,
          indentation: true
        },
        suggest: {
          showKeywords: true,
          showSnippets: true,
          showFunctions: true,
          showConstructors: true,
          showFields: true,
          showVariables: true,
          showClasses: true,
          showStructs: true,
          showInterfaces: true,
          showModules: true,
          showProperties: true,
          showEvents: true,
          showOperators: true,
          showUnits: true,
          showValues: true,
          showConstants: true,
          showEnums: true,
          showEnumMembers: true,
          showColors: true,
          showFiles: true,
          showReferences: true,
          showFolders: true,
          showTypeParameters: true,
          showIssues: true,
          showUsers: true
        }
      })

      editorInstanceRef.current = editor

      // Set up event listeners
      const contentChangeDisposable = editor.onDidChangeModelContent(() => {
        const currentValue = editor.getValue()
        onChange?.(currentValue)
      })

      const cursorChangeDisposable = editor.onDidChangeCursorPosition((e) => {
        onCursorPositionChange?.(e.position.lineNumber, e.position.column)
      })

      // Add encouraging keybindings
      editor.addAction({
        id: 'encourage-developer',
        label: '💜 Mama Bear Encouragement',
        keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyH],
        run: () => {
          const messages = [
            "// 🌟 You're doing amazing, keep going!",
            "// 💜 Mama bear believes in you!",
            "// ✨ Every bug is just a feature in disguise!",
            "// 🌈 Your code brings joy to the world!",
            "// 💪 You're stronger than any error message!"
          ]
          const randomMessage = messages[Math.floor(Math.random() * messages.length)]
          const position = editor.getPosition()
          if (position) {
            editor.executeEdits('encourage-developer', [{
              range: new monaco.Range(position.lineNumber, 1, position.lineNumber, 1),
              text: randomMessage + '\n'
            }])
          }
        }
      })

      return () => {
        contentChangeDisposable.dispose()
        cursorChangeDisposable.dispose()
        editor.dispose()
      }
    } catch (err) {
      setError('Failed to initialize editor. But you\'re still wonderful! 💜')
    }
  }, [isLoading, language, theme, readOnly, minimap, fontSize, wordWrap, onChange, onCursorPositionChange])

  // Update editor value when prop changes
  useEffect(() => {
    if (editorInstanceRef.current && value !== undefined) {
      const currentValue = editorInstanceRef.current.getValue()
      if (currentValue !== value) {
        editorInstanceRef.current.setValue(value)
      }
    }
  }, [value])

  // Update language
  useEffect(() => {
    if (editorInstanceRef.current && monacoRef.current) {
      const model = editorInstanceRef.current.getModel()
      if (model) {
        monacoRef.current.editor.setModelLanguage(model, language === 'javascript' ? 'javascript' : language)
      }
    }
  }, [language])

  if (error) {
    return (
      <div className={cn(
        "flex items-center justify-center h-full min-h-[400px] rounded-lg",
        "backdrop-blur-md bg-purple-500/10 border border-purple-300/20",
        className
      )}>
        <div className="text-center p-8">
          <Heart className="w-12 h-12 text-purple-400 mx-auto mb-4" />
          <p className="text-purple-200 mb-2">{error}</p>
          <p className="text-purple-300 text-sm">💜 Mama bear still loves your effort!</p>
        </div>
      </div>
    )
  }

  if (isLoading) {
    return (
      <div className={cn(
        "flex items-center justify-center h-full min-h-[400px] rounded-lg",
        "backdrop-blur-md bg-purple-500/10 border border-purple-300/20",
        className
      )}>
        <div className="text-center">
          <Sparkles className="w-8 h-8 text-purple-400 mx-auto mb-4 animate-spin" />
          <p className="text-purple-200">Loading your magical editor... ✨</p>
        </div>
      </div>
    )
  }

  return (
    <div 
      ref={editorRef} 
      className={cn(
        "h-full min-h-[400px] rounded-lg overflow-hidden",
        "backdrop-blur-md bg-purple-500/5 border border-purple-300/20",
        className
      )} 
    />
  )
}

interface PurpleMonacoIDEProps {
  defaultLanguage?: keyof typeof LANGUAGE_CONFIGS
  defaultValue?: string
  onSave?: (content: string, filename: string) => void
  onLoad?: (filename: string) => Promise<string>
  className?: string
}

const PurpleMonacoIDE: React.FC<PurpleMonacoIDEProps> = ({
  defaultLanguage = 'javascript',
  defaultValue,
  onSave,
  onLoad,
  className
}) => {
  const [language, setLanguage] = useState<keyof typeof LANGUAGE_CONFIGS>(defaultLanguage)
  const [code, setCode] = useState(defaultValue || LANGUAGE_CONFIGS[defaultLanguage].defaultCode)
  const [filename, setFilename] = useState(`main.${LANGUAGE_CONFIGS[defaultLanguage].extension}`)
  const [cursorPosition, setCursorPosition] = useState({ line: 1, column: 1 })
  const [fontSize, setFontSize] = useState(14)
  const [showMinimap, setShowMinimap] = useState(true)
  const [wordWrap, setWordWrap] = useState(true)
  const [theme, setTheme] = useState<'purple-glass' | 'vs-dark' | 'vs-light'>('purple-glass')
  const [isRunning, setIsRunning] = useState(false)
  const [output, setOutput] = useState('')
  const [copied, setCopied] = useState(false)

  const handleLanguageChange = useCallback((newLanguage: keyof typeof LANGUAGE_CONFIGS) => {
    setLanguage(newLanguage)
    setCode(LANGUAGE_CONFIGS[newLanguage].defaultCode)
    setFilename(`main.${LANGUAGE_CONFIGS[newLanguage].extension}`)
  }, [])

  const handleCopy = useCallback(async () => {
    try {
      await navigator.clipboard.writeText(code)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error('Failed to copy code')
    }
  }, [code])

  const handleDownload = useCallback(() => {
    const blob = new Blob([code], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }, [code, filename])

  const handleSave = useCallback(() => {
    onSave?.(code, filename)
  }, [code, filename, onSave])

  const handleRun = useCallback(async () => {
    if (language !== 'javascript') {
      setOutput('💜 Mama bear says: Only JavaScript can run in the browser, sweetie!')
      return
    }

    setIsRunning(true)
    setOutput('🌟 Running your beautiful code...')

    try {
      // Simulate execution delay for better UX
      await new Promise(resolve => setTimeout(resolve, 1000))

      const logs: string[] = []
      const originalLog = console.log
      const originalError = console.error
      const originalWarn = console.warn

      console.log = (...args) => logs.push('📝 ' + args.join(' '))
      console.error = (...args) => logs.push('❌ ' + args.join(' '))
      console.warn = (...args) => logs.push('⚠️ ' + args.join(' '))

      // Execute the code
      eval(code)

      // Restore console methods
      console.log = originalLog
      console.error = originalError
      console.warn = originalWarn

      setOutput(logs.length > 0 ? logs.join('\n') : '✨ Code executed successfully! You did great!')
    } catch (error) {
      setOutput(`💜 Don't worry about errors, they help us learn!\n❌ ${error}`)
    } finally {
      setIsRunning(false)
    }
  }, [code, language])

  const zoomIn = useCallback(() => {
    setFontSize(prev => Math.min(prev + 2, 24))
  }, [])

  const zoomOut = useCallback(() => {
    setFontSize(prev => Math.max(prev - 2, 10))
  }, [])

  return (
    <div className={cn(
      "h-full min-h-[600px] flex flex-col",
      "backdrop-blur-md bg-gradient-to-br from-purple-900/20 to-purple-600/10",
      "border border-purple-300/20 rounded-lg overflow-hidden",
      className
    )}>
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-purple-300/20 backdrop-blur-sm bg-purple-500/5">
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <Sparkles className="w-5 h-5 text-purple-400" />
            <h2 className="text-lg font-semibold text-purple-100">
              💜 Mama Bear's IDE
            </h2>
          </div>
          <select
            value={language}
            onChange={(e) => handleLanguageChange(e.target.value as keyof typeof LANGUAGE_CONFIGS)}
            className="px-3 py-1 rounded-md bg-purple-800/50 text-purple-100 border border-purple-400/30 text-sm focus:outline-none focus:ring-2 focus:ring-purple-400"
          >
            {Object.entries(LANGUAGE_CONFIGS).map(([key, config]) => (
              <option key={key} value={key}>
                {config.label}
              </option>
            ))}
          </select>
        </div>

        <div className="flex items-center space-x-2">
          <button
            onClick={zoomOut}
            className="p-2 rounded-md bg-purple-700/50 text-purple-200 hover:bg-purple-600/50 transition-colors"
            title="Zoom Out"
          >
            <ZoomOut className="w-4 h-4" />
          </button>
          <span className="text-purple-200 text-sm min-w-[3rem] text-center">
            {fontSize}px
          </span>
          <button
            onClick={zoomIn}
            className="p-2 rounded-md bg-purple-700/50 text-purple-200 hover:bg-purple-600/50 transition-colors"
            title="Zoom In"
          >
            <ZoomIn className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Toolbar */}
      <div className="flex items-center justify-between p-3 border-b border-purple-300/20 backdrop-blur-sm bg-purple-500/5">
        <div className="flex items-center space-x-2">
          <input
            type="text"
            value={filename}
            onChange={(e) => setFilename(e.target.value)}
            className="px-3 py-1 rounded-md bg-purple-800/50 text-purple-100 border border-purple-400/30 text-sm focus:outline-none focus:ring-2 focus:ring-purple-400"
          />
          <button
            onClick={handleSave}
            className="p-2 rounded-md bg-purple-700/50 text-purple-200 hover:bg-purple-600/50 transition-colors"
            title="Save File"
          >
            <Save className="w-4 h-4" />
          </button>
          <button
            onClick={handleCopy}
            className="p-2 rounded-md bg-purple-700/50 text-purple-200 hover:bg-purple-600/50 transition-colors"
            title="Copy Code"
          >
            {copied ? <Heart className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
          </button>
          <button
            onClick={handleDownload}
            className="p-2 rounded-md bg-purple-700/50 text-purple-200 hover:bg-purple-600/50 transition-colors"
            title="Download File"
          >
            <Download className="w-4 h-4" />
          </button>
        </div>

        <div className="flex items-center space-x-2">
          <button
            onClick={handleRun}
            disabled={isRunning}
            className="flex items-center space-x-2 px-4 py-2 rounded-md bg-green-600/80 text-white hover:bg-green-500/80 disabled:opacity-50 transition-colors"
          >
            {isRunning ? <Square className="w-4 h-4" /> : <Play className="w-4 h-4" />}
            <span>{isRunning ? 'Running...' : 'Run'}</span>
          </button>
          <div className="text-purple-200 text-sm">
            Line {cursorPosition.line}, Col {cursorPosition.column}
          </div>
        </div>
      </div>

      {/* Editor */}
      <div className="flex-1 flex">
        <div className="flex-1">
          <MonacoEditor
            value={code}
            language={language}
            onChange={setCode}
            onCursorPositionChange={(line, column) => setCursorPosition({ line, column })}
            fontSize={fontSize}
            minimap={showMinimap}
            wordWrap={wordWrap}
            theme={theme}
            className="h-full"
          />
        </div>
      </div>

      {/* Output Panel */}
      {output && (
        <div className="border-t border-purple-300/20 backdrop-blur-sm bg-purple-500/5">
          <div className="p-3">
            <div className="flex items-center space-x-2 mb-2">
              <FileText className="w-4 h-4 text-purple-400" />
              <span className="text-purple-200 text-sm font-medium">Output</span>
            </div>
            <pre className="text-sm text-purple-100 bg-purple-900/30 p-3 rounded-md overflow-auto max-h-32 whitespace-pre-wrap">
              {output}
            </pre>
          </div>
        </div>
      )}

      {/* Encouraging Footer */}
      <div className="p-2 text-center border-t border-purple-300/20 backdrop-blur-sm bg-purple-500/5">
        <p className="text-purple-300 text-xs">
          💜 Remember: You're amazing and your code matters! Keep building beautiful things! ✨
        </p>
      </div>
    </div>
  )
}

export default function MonacoIDEDemo() {
  const handleSave = (content: string, filename: string) => {
    console.log(`💜 Saving ${filename}:`, content)
    // Implement your save logic here
  }

  const handleLoad = async (filename: string): Promise<string> => {
    console.log(`💜 Loading ${filename}`)
    // Implement your load logic here
    return ''
  }

  return (
    <div className="w-full h-screen p-4 bg-gradient-to-br from-purple-900 to-purple-700">
      <PurpleMonacoIDE
        defaultLanguage="javascript"
        onSave={handleSave}
        onLoad={handleLoad}
        className="w-full h-full"
      />
    </div>
  )
}
