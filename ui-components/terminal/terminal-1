"use client"

import * as React from "react"
import { useState, useRef, useEffect, useCallback } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { cn } from "@/lib/utils"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { 
  Terminal, 
  X, 
  Plus, 
  Settings, 
  Copy, 
  Maximize2, 
  Minimize2,
  RotateCcw,
  Power,
  ChevronRight
} from "lucide-react"

interface TerminalTab {
  id: string
  title: string
  shell: 'powershell' | 'cmd' | 'bash' | 'git-bash'
  isActive: boolean
  content: string[]
  currentDirectory: string
  isRunning: boolean
}

interface TerminalCommand {
  command: string
  output: string[]
  timestamp: Date
  exitCode: number
}

interface ProfessionalTerminalProps {
  className?: string
  initialTabs?: TerminalTab[]
  onCommand?: (command: string, tabId: string) => void
  theme?: 'dark' | 'purple-glass'
}

const WELCOME_MESSAGES = {
  powershell: [
    "PowerShell 7.3.0",
    "Copyright (c) Microsoft Corporation.",
    "",
    "💜 Mama bear says: 'You're doing great, keep coding!'",
    "Type 'help' to get started.",
    ""
  ],
  cmd: [
    "Microsoft Windows [Version 10.0.22621.2428]",
    "(c) Microsoft Corporation. All rights reserved.",
    "",
    "💜 Mama bear whispers: 'Every expert was once a beginner!'",
    ""
  ],
  bash: [
    "GNU bash, version 5.1.16(1)-release (x86_64-pc-linux-gnu)",
    "",
    "💜 Mama bear encourages: 'You've got this, developer!'",
    "Welcome to your coding sanctuary.",
    ""
  ],
  'git-bash': [
    "Git Bash version 2.41.0.windows.1",
    "",
    "💜 Mama bear believes in you: 'Code with confidence!'",
    "Happy coding! 🚀",
    ""
  ]
}

const SHELL_PROMPTS = {
  powershell: "PS C:\\>",
  cmd: "C:\\>",
  bash: "user@localhost:~$",
  'git-bash': "user@MINGW64 ~$"
}

function TerminalOutput({ content, isRunning }: { content: string[], isRunning: boolean }) {
  const scrollRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight
    }
  }, [content])

  return (
    <div 
      ref={scrollRef}
      className="flex-1 overflow-y-auto p-4 font-mono text-sm leading-relaxed"
      style={{ 
        scrollbarWidth: 'thin',
        scrollbarColor: 'rgba(139, 92, 246, 0.3) transparent'
      }}
    >
      {content.map((line, index) => (
        <div key={index} className="whitespace-pre-wrap text-green-400">
          {line}
        </div>
      ))}
      {isRunning && (
        <motion.div
          animate={{ opacity: [1, 0.3, 1] }}
          transition={{ duration: 1, repeat: Infinity }}
          className="inline-block w-2 h-4 bg-purple-400 ml-1"
        />
      )}
    </div>
  )
}

function TerminalInput({ 
  onSubmit, 
  shell, 
  currentDirectory,
  disabled 
}: { 
  onSubmit: (command: string) => void
  shell: string
  currentDirectory: string
  disabled: boolean
}) {
  const [input, setInput] = useState("")
  const [history, setHistory] = useState<string[]>([])
  const [historyIndex, setHistoryIndex] = useState(-1)
  const inputRef = useRef<HTMLInputElement>(null)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (input.trim() && !disabled) {
      setHistory(prev => [...prev, input])
      setHistoryIndex(-1)
      onSubmit(input)
      setInput("")
    }
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'ArrowUp') {
      e.preventDefault()
      if (history.length > 0) {
        const newIndex = historyIndex === -1 ? history.length - 1 : Math.max(0, historyIndex - 1)
        setHistoryIndex(newIndex)
        setInput(history[newIndex])
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault()
      if (historyIndex >= 0) {
        const newIndex = historyIndex + 1
        if (newIndex >= history.length) {
          setHistoryIndex(-1)
          setInput("")
        } else {
          setHistoryIndex(newIndex)
          setInput(history[newIndex])
        }
      }
    }
  }

  useEffect(() => {
    if (inputRef.current && !disabled) {
      inputRef.current.focus()
    }
  }, [disabled])

  const prompt = SHELL_PROMPTS[shell as keyof typeof SHELL_PROMPTS] || "$ "

  return (
    <form onSubmit={handleSubmit} className="flex items-center p-4 border-t border-purple-500/20">
      <span className="text-purple-400 font-mono text-sm mr-2 whitespace-nowrap">
        {prompt}
      </span>
      <Input
        ref={inputRef}
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={handleKeyDown}
        disabled={disabled}
        className="flex-1 bg-transparent border-none text-green-400 font-mono text-sm focus:ring-0 focus:outline-none p-0"
        placeholder={disabled ? "Process running..." : "Enter command..."}
      />
    </form>
  )
}

function TerminalTab({ 
  tab, 
  isActive, 
  onClose, 
  onSelect 
}: { 
  tab: TerminalTab
  isActive: boolean
  onClose: () => void
  onSelect: () => void
}) {
  return (
    <motion.div
      layout
      className={cn(
        "flex items-center gap-2 px-3 py-2 rounded-t-lg border-b-2 transition-all cursor-pointer group relative",
        isActive 
          ? "bg-purple-900/30 border-purple-400 text-purple-100" 
          : "bg-black/20 border-transparent text-purple-300 hover:bg-purple-900/20"
      )}
      onClick={onSelect}
    >
      <Terminal className="w-4 h-4" />
      <span className="text-sm font-medium truncate max-w-24">
        {tab.title}
      </span>
      {tab.isRunning && (
        <motion.div
          animate={{ scale: [1, 1.2, 1] }}
          transition={{ duration: 1, repeat: Infinity }}
          className="w-2 h-2 bg-green-400 rounded-full"
        />
      )}
      <Button
        variant="ghost"
        size="sm"
        className="w-4 h-4 p-0 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-500/20"
        onClick={(e) => {
          e.stopPropagation()
          onClose()
        }}
      >
        <X className="w-3 h-3" />
      </Button>
    </motion.div>
  )
}

function ProfessionalTerminal({
  className,
  initialTabs = [],
  onCommand,
  theme = 'purple-glass'
}: ProfessionalTerminalProps) {
  const [tabs, setTabs] = useState<TerminalTab[]>(() => {
    if (initialTabs.length > 0) return initialTabs
    return [{
      id: '1',
      title: 'PowerShell',
      shell: 'powershell',
      isActive: true,
      content: WELCOME_MESSAGES.powershell,
      currentDirectory: 'C:\\',
      isRunning: false
    }]
  })
  
  const [activeTabId, setActiveTabId] = useState(tabs[0]?.id || '1')
  const [isMaximized, setIsMaximized] = useState(false)

  const activeTab = tabs.find(tab => tab.id === activeTabId)

  const createNewTab = (shell: 'powershell' | 'cmd' | 'bash' | 'git-bash' = 'powershell') => {
    const newTab: TerminalTab = {
      id: Date.now().toString(),
      title: shell.charAt(0).toUpperCase() + shell.slice(1),
      shell,
      isActive: false,
      content: WELCOME_MESSAGES[shell],
      currentDirectory: shell === 'powershell' || shell === 'cmd' ? 'C:\\' : '~',
      isRunning: false
    }
    
    setTabs(prev => [...prev, newTab])
    setActiveTabId(newTab.id)
  }

  const closeTab = (tabId: string) => {
    setTabs(prev => {
      const filtered = prev.filter(tab => tab.id !== tabId)
      if (filtered.length === 0) {
        createNewTab()
        return tabs
      }
      if (activeTabId === tabId && filtered.length > 0) {
        setActiveTabId(filtered[0].id)
      }
      return filtered
    })
  }

  const executeCommand = useCallback((command: string) => {
    if (!activeTab) return

    const trimmedCommand = command.trim()
    
    setTabs(prev => prev.map(tab => {
      if (tab.id === activeTabId) {
        const prompt = SHELL_PROMPTS[tab.shell as keyof typeof SHELL_PROMPTS]
        const newContent = [...tab.content, `${prompt} ${trimmedCommand}`]
        
        // Simulate command execution
        let output: string[] = []
        let isRunning = false
        
        switch (trimmedCommand.toLowerCase()) {
          case 'clear':
          case 'cls':
            return { ...tab, content: [] }
          
          case 'help':
            output = [
              "Available commands:",
              "  clear/cls  - Clear the terminal",
              "  help       - Show this help message",
              "  dir/ls     - List directory contents",
              "  cd         - Change directory",
              "  echo       - Display text",
              "  exit       - Close terminal",
              ""
            ]
            break
            
          case 'dir':
          case 'ls':
            output = [
              "Directory listing:",
              "  📁 Documents",
              "  📁 Downloads", 
              "  📁 Pictures",
              "  📄 README.md",
              "  📄 package.json",
              ""
            ]
            break
            
          case 'exit':
            setTimeout(() => closeTab(tab.id), 500)
            output = ["Goodbye! 👋"]
            break
            
          default:
            if (trimmedCommand.startsWith('echo ')) {
              output = [trimmedCommand.substring(5)]
            } else if (trimmedCommand.startsWith('cd ')) {
              const newDir = trimmedCommand.substring(3).trim()
              output = [`Changed directory to: ${newDir}`]
            } else {
              output = [
                `'${trimmedCommand}' is not recognized as an internal or external command.`,
                "Type 'help' for available commands.",
                ""
              ]
            }
        }
        
        return {
          ...tab,
          content: [...newContent, ...output, ""],
          isRunning
        }
      }
      return tab
    }))

    onCommand?.(trimmedCommand, activeTabId)
  }, [activeTab, activeTabId, onCommand, closeTab])

  const clearTerminal = () => {
    if (activeTab) {
      setTabs(prev => prev.map(tab => 
        tab.id === activeTabId ? { ...tab, content: [] } : tab
      ))
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={cn(
        "w-full h-[600px] rounded-xl overflow-hidden",
        "bg-gradient-to-br from-black/90 via-purple-950/30 to-black/90",
        "backdrop-blur-xl border border-purple-500/20",
        "shadow-2xl shadow-purple-500/10",
        isMaximized && "fixed inset-4 z-50 h-auto",
        className
      )}
    >
      {/* Terminal Header */}
      <div className="flex items-center justify-between p-3 bg-black/40 backdrop-blur-sm border-b border-purple-500/20">
        <div className="flex items-center gap-2">
          <div className="flex gap-2">
            <div className="w-3 h-3 rounded-full bg-red-500"></div>
            <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
            <div className="w-3 h-3 rounded-full bg-green-500"></div>
          </div>
          <Terminal className="w-4 h-4 text-purple-400 ml-2" />
          <span className="text-sm font-medium text-purple-100">Professional Terminal</span>
        </div>
        
        <div className="flex items-center gap-1">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => createNewTab('powershell')}
            className="h-8 w-8 p-0 hover:bg-purple-500/20"
            title="New PowerShell Tab"
          >
            <Plus className="w-4 h-4 text-purple-300" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={clearTerminal}
            className="h-8 w-8 p-0 hover:bg-purple-500/20"
            title="Clear Terminal"
          >
            <RotateCcw className="w-4 h-4 text-purple-300" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsMaximized(!isMaximized)}
            className="h-8 w-8 p-0 hover:bg-purple-500/20"
            title={isMaximized ? "Restore" : "Maximize"}
          >
            {isMaximized ? (
              <Minimize2 className="w-4 h-4 text-purple-300" />
            ) : (
              <Maximize2 className="w-4 h-4 text-purple-300" />
            )}
          </Button>
        </div>
      </div>

      {/* Terminal Tabs */}
      <div className="flex items-end gap-1 px-3 bg-black/20">
        <AnimatePresence mode="popLayout">
          {tabs.map((tab) => (
            <TerminalTab
              key={tab.id}
              tab={tab}
              isActive={tab.id === activeTabId}
              onClose={() => closeTab(tab.id)}
              onSelect={() => setActiveTabId(tab.id)}
            />
          ))}
        </AnimatePresence>
        
        <div className="flex gap-1 ml-auto">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => createNewTab('bash')}
            className="h-6 px-2 text-xs hover:bg-purple-500/20 text-purple-300"
          >
            Bash
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => createNewTab('cmd')}
            className="h-6 px-2 text-xs hover:bg-purple-500/20 text-purple-300"
          >
            CMD
          </Button>
        </div>
      </div>

      {/* Terminal Content */}
      <div className="flex flex-col h-full">
        <AnimatePresence mode="wait">
          {activeTab && (
            <motion.div
              key={activeTab.id}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="flex flex-col flex-1 min-h-0"
            >
              <TerminalOutput 
                content={activeTab.content} 
                isRunning={activeTab.isRunning}
              />
              <TerminalInput
                onSubmit={executeCommand}
                shell={activeTab.shell}
                currentDirectory={activeTab.currentDirectory}
                disabled={activeTab.isRunning}
              />
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      <style jsx>{`
        .terminal-scrollbar::-webkit-scrollbar {
          width: 8px;
        }
        .terminal-scrollbar::-webkit-scrollbar-track {
          background: rgba(0, 0, 0, 0.1);
        }
        .terminal-scrollbar::-webkit-scrollbar-thumb {
          background: rgba(139, 92, 246, 0.3);
          border-radius: 4px;
        }
        .terminal-scrollbar::-webkit-scrollbar-thumb:hover {
          background: rgba(139, 92, 246, 0.5);
        }
      `}</style>
    </motion.div>
  )
}

export default function ProfessionalTerminalDemo() {
  const handleCommand = (command: string, tabId: string) => {
    console.log(`Command executed in tab ${tabId}:`, command)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-950 via-black to-purple-950 p-8">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4">
            Professional Terminal Component
          </h1>
          <p className="text-purple-300 text-lg">
            A beautiful, functional terminal with multiple shell support and glassmorphism design
          </p>
        </div>
        
        <ProfessionalTerminal
          onCommand={handleCommand}
          theme="purple-glass"
        />
      </div>
    </div>
  )
}
