"use client";

import React, { useState, useRef, useEffect, useCallback } from "react";
import { 
  Terminal, 
  Plus, 
  X, 
  Maximize2, 
  Minimize2, 
  Copy, 
  Settings, 
  Trash2, 
  RotateCcw,
  Play,
  Square,
  ChevronDown,
  Folder,
  User
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

interface TerminalTab {
  id: string;
  title: string;
  shell: "PowerShell" | "CMD" | "Bash" | "Git Bash";
  isActive: boolean;
  history: string[];
  currentDirectory: string;
  output: Array<{
    type: "command" | "output" | "error" | "system";
    content: string;
    timestamp: Date;
  }>;
  isRunning: boolean;
}

interface ProfessionalTerminalProps {
  className?: string;
  onCommand?: (command: string, tabId: string) => void;
  onTabChange?: (tabId: string) => void;
  onTabClose?: (tabId: string) => void;
}

const shellPrompts = {
  PowerShell: "PS C:\\Users\\Developer>",
  CMD: "C:\\Users\\Developer>",
  Bash: "developer@monaco:~$",
  "Git Bash": "developer@monaco MINGW64 ~$"
};

const shellColors = {
  PowerShell: "text-blue-400",
  CMD: "text-yellow-400", 
  Bash: "text-green-400",
  "Git Bash": "text-orange-400"
};

const welcomeMessages = {
  PowerShell: "ðŸŒŸ Mama Bear says: 'You're doing amazing, sweetie! PowerShell is ready for your brilliant commands!'",
  CMD: "ðŸŒŸ Mama Bear says: 'Command Prompt is here to support your coding journey, dear!'",
  Bash: "ðŸŒŸ Mama Bear says: 'Bash shell loaded with love! You've got this, champion!'",
  "Git Bash": "ðŸŒŸ Mama Bear says: 'Git Bash is ready! Time to version control like the pro you are!'"
};

export function ProfessionalTerminal({ 
  className = "", 
  onCommand,
  onTabChange,
  onTabClose 
}: ProfessionalTerminalProps) {
  const [tabs, setTabs] = useState<TerminalTab[]>([
    {
      id: "tab-1",
      title: "PowerShell",
      shell: "PowerShell",
      isActive: true,
      history: [],
      currentDirectory: "C:\\Users\\Developer",
      output: [
        {
          type: "system",
          content: welcomeMessages.PowerShell,
          timestamp: new Date()
        }
      ],
      isRunning: false
    }
  ]);

  const [currentInput, setCurrentInput] = useState("");
  const [historyIndex, setHistoryIndex] = useState(-1);
  const [isMaximized, setIsMaximized] = useState(false);
  const [fontSize, setFontSize] = useState(14);
  const [theme, setTheme] = useState("purple");
  const [showSettings, setShowSettings] = useState(false);

  const terminalRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const outputRef = useRef<HTMLDivElement>(null);

  const activeTab = tabs.find(tab => tab.isActive);

  const focusInput = useCallback(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  const scrollToBottom = useCallback(() => {
    if (outputRef.current) {
      outputRef.current.scrollTop = outputRef.current.scrollHeight;
    }
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [activeTab?.output, scrollToBottom]);

  useEffect(() => {
    focusInput();
  }, [activeTab?.id, focusInput]);

  const createNewTab = (shell: TerminalTab["shell"]) => {
    const newTab: TerminalTab = {
      id: `tab-${Date.now()}`,
      title: shell,
      shell,
      isActive: false,
      history: [],
      currentDirectory: shell.includes("Bash") ? "/home/developer" : "C:\\Users\\Developer",
      output: [
        {
          type: "system",
          content: welcomeMessages[shell],
          timestamp: new Date()
        }
      ],
      isRunning: false
    };

    setTabs(prev => [
      ...prev.map(tab => ({ ...tab, isActive: false })),
      { ...newTab, isActive: true }
    ]);
  };

  const switchTab = (tabId: string) => {
    setTabs(prev => prev.map(tab => ({
      ...tab,
      isActive: tab.id === tabId
    })));
    onTabChange?.(tabId);
    setHistoryIndex(-1);
    setCurrentInput("");
  };

  const closeTab = (tabId: string) => {
    if (tabs.length === 1) return;
    
    const tabIndex = tabs.findIndex(tab => tab.id === tabId);
    const wasActive = tabs[tabIndex].isActive;
    
    setTabs(prev => {
      const newTabs = prev.filter(tab => tab.id !== tabId);
      if (wasActive && newTabs.length > 0) {
        const newActiveIndex = Math.min(tabIndex, newTabs.length - 1);
        newTabs[newActiveIndex].isActive = true;
      }
      return newTabs;
    });
    
    onTabClose?.(tabId);
  };

  const executeCommand = async (command: string) => {
    if (!activeTab || !command.trim()) return;

    const trimmedCommand = command.trim();
    
    // Add command to history
    setTabs(prev => prev.map(tab => 
      tab.id === activeTab.id 
        ? { 
            ...tab, 
            history: [...tab.history, trimmedCommand],
            output: [
              ...tab.output,
              {
                type: "command",
                content: `${shellPrompts[tab.shell]} ${trimmedCommand}`,
                timestamp: new Date()
              }
            ]
          }
        : tab
    ));

    // Simulate command execution
    setTimeout(() => {
      let output = "";
      let outputType: "output" | "error" = "output";

      switch (trimmedCommand.toLowerCase()) {
        case "clear":
        case "cls":
          setTabs(prev => prev.map(tab => 
            tab.id === activeTab.id 
              ? { ...tab, output: [] }
              : tab
          ));
          setCurrentInput("");
          return;

        case "help":
          output = `Available commands:
  clear/cls    - Clear the terminal
  dir/ls       - List directory contents  
  cd <path>    - Change directory
  pwd          - Show current directory
  echo <text>  - Display text
  date         - Show current date/time
  whoami       - Show current user
  exit         - Close terminal tab
  help         - Show this help message
  
ðŸŒŸ Mama Bear tip: You're doing great! Keep exploring!`;
          break;

        case "dir":
        case "ls":
          output = `Directory of ${activeTab.currentDirectory}

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----        12/15/2024   2:30 PM                Documents
d-----        12/15/2024   1:45 PM                Downloads  
d-----        12/15/2024  10:20 AM                Projects
-a----        12/15/2024   3:15 PM           1024 README.md
-a----        12/14/2024   4:30 PM           2048 config.json`;
          break;

        case "pwd":
          output = activeTab.currentDirectory;
          break;

        case "date":
          output = new Date().toLocaleString();
          break;

        case "whoami":
          output = "Developer\\monaco-user";
          break;

        case "exit":
          closeTab(activeTab.id);
          return;

        default:
          if (trimmedCommand.startsWith("echo ")) {
            output = trimmedCommand.substring(5);
          } else if (trimmedCommand.startsWith("cd ")) {
            const path = trimmedCommand.substring(3).trim();
            output = `Changed directory to: ${path}`;
            setTabs(prev => prev.map(tab => 
              tab.id === activeTab.id 
                ? { ...tab, currentDirectory: path }
                : tab
            ));
          } else {
            output = `'${trimmedCommand}' is not recognized as an internal or external command.
ðŸŒŸ Mama Bear says: "That's okay, sweetie! Try 'help' to see available commands."`;
            outputType = "error";
          }
      }

      if (output) {
        setTabs(prev => prev.map(tab => 
          tab.id === activeTab.id 
            ? { 
                ...tab, 
                output: [
                  ...tab.output,
                  {
                    type: outputType,
                    content: output,
                    timestamp: new Date()
                  }
                ]
              }
            : tab
        ));
      }
    }, 100);

    onCommand?.(trimmedCommand, activeTab.id);
    setCurrentInput("");
    setHistoryIndex(-1);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (!activeTab) return;

    switch (e.key) {
      case "Enter":
        executeCommand(currentInput);
        break;

      case "ArrowUp":
        e.preventDefault();
        if (activeTab.history.length > 0) {
          const newIndex = historyIndex === -1 
            ? activeTab.history.length - 1 
            : Math.max(0, historyIndex - 1);
          setHistoryIndex(newIndex);
          setCurrentInput(activeTab.history[newIndex]);
        }
        break;

      case "ArrowDown":
        e.preventDefault();
        if (historyIndex !== -1) {
          const newIndex = historyIndex + 1;
          if (newIndex >= activeTab.history.length) {
            setHistoryIndex(-1);
            setCurrentInput("");
          } else {
            setHistoryIndex(newIndex);
            setCurrentInput(activeTab.history[newIndex]);
          }
        }
        break;

      case "c":
        if (e.ctrlKey) {
          e.preventDefault();
          setCurrentInput("");
          if (activeTab.isRunning) {
            setTabs(prev => prev.map(tab => 
              tab.id === activeTab.id 
                ? { 
                    ...tab, 
                    isRunning: false,
                    output: [
                      ...tab.output,
                      {
                        type: "system",
                        content: "^C Process interrupted",
                        timestamp: new Date()
                      }
                    ]
                  }
                : tab
            ));
          }
        }
        break;

      case "l":
        if (e.ctrlKey) {
          e.preventDefault();
          executeCommand("clear");
        }
        break;

      case "v":
        if (e.ctrlKey) {
          e.preventDefault();
          navigator.clipboard.readText().then(text => {
            setCurrentInput(prev => prev + text);
          });
        }
        break;
    }
  };

  const copyOutput = () => {
    if (activeTab) {
      const output = activeTab.output
        .map(item => item.content)
        .join("\n");
      navigator.clipboard.writeText(output);
    }
  };

  const clearTerminal = () => {
    if (activeTab) {
      setTabs(prev => prev.map(tab => 
        tab.id === activeTab.id 
          ? { ...tab, output: [] }
          : tab
      ));
    }
  };

  return (
    <div className={`terminal-container ${className}`}>
      <motion.div
        className={`
          bg-gray-900/95 backdrop-blur-md border border-purple-500/30 
          rounded-lg overflow-hidden shadow-2xl shadow-purple-500/20
          ${isMaximized ? 'fixed inset-4 z-50' : 'w-full max-w-4xl h-96'}
        `}
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3 }}
      >
        {/* Terminal Header */}
        <div className="bg-gray-800/90 border-b border-purple-500/20 p-3 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 rounded-full bg-red-500"></div>
              <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
              <div className="w-3 h-3 rounded-full bg-green-500"></div>
            </div>
            <Terminal className="w-4 h-4 text-purple-400" />
            <span className="text-sm font-medium text-gray-300">Monaco Terminal</span>
          </div>

          <div className="flex items-center gap-2">
            <button
              onClick={() => setShowSettings(!showSettings)}
              className="p-1.5 rounded hover:bg-gray-700/50 text-gray-400 hover:text-purple-400 transition-colors"
            >
              <Settings className="w-4 h-4" />
            </button>
            <button
              onClick={copyOutput}
              className="p-1.5 rounded hover:bg-gray-700/50 text-gray-400 hover:text-purple-400 transition-colors"
            >
              <Copy className="w-4 h-4" />
            </button>
            <button
              onClick={clearTerminal}
              className="p-1.5 rounded hover:bg-gray-700/50 text-gray-400 hover:text-purple-400 transition-colors"
            >
              <Trash2 className="w-4 h-4" />
            </button>
            <button
              onClick={() => setIsMaximized(!isMaximized)}
              className="p-1.5 rounded hover:bg-gray-700/50 text-gray-400 hover:text-purple-400 transition-colors"
            >
              {isMaximized ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
            </button>
          </div>
        </div>

        {/* Settings Panel */}
        <AnimatePresence>
          {showSettings && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="bg-gray-800/50 border-b border-purple-500/20 p-3"
            >
              <div className="flex items-center gap-4 text-sm">
                <div className="flex items-center gap-2">
                  <span className="text-gray-400">Font Size:</span>
                  <input
                    type="range"
                    min="10"
                    max="20"
                    value={fontSize}
                    onChange={(e) => setFontSize(Number(e.target.value))}
                    className="w-20"
                  />
                  <span className="text-purple-400">{fontSize}px</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-gray-400">Theme:</span>
                  <select
                    value={theme}
                    onChange={(e) => setTheme(e.target.value)}
                    className="bg-gray-700 border border-gray-600 rounded px-2 py-1 text-gray-300"
                  >
                    <option value="purple">Purple</option>
                    <option value="blue">Blue</option>
                    <option value="green">Green</option>
                  </select>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Tab Bar */}
        <div className="bg-gray-800/70 border-b border-purple-500/20 flex items-center">
          <div className="flex items-center overflow-x-auto">
            {tabs.map((tab) => (
              <div
                key={tab.id}
                className={`
                  flex items-center gap-2 px-3 py-2 border-r border-gray-700/50 cursor-pointer
                  transition-colors min-w-0 group
                  ${tab.isActive 
                    ? 'bg-gray-900/50 text-purple-400 border-b-2 border-purple-500' 
                    : 'text-gray-400 hover:text-gray-300 hover:bg-gray-700/30'
                  }
                `}
                onClick={() => switchTab(tab.id)}
              >
                <Terminal className="w-3 h-3 flex-shrink-0" />
                <span className="text-xs font-medium truncate">{tab.title}</span>
                {tab.isRunning && (
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse flex-shrink-0"></div>
                )}
                {tabs.length > 1 && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      closeTab(tab.id);
                    }}
                    className="opacity-0 group-hover:opacity-100 p-0.5 rounded hover:bg-gray-600/50 transition-all"
                  >
                    <X className="w-3 h-3" />
                  </button>
                )}
              </div>
            ))}
          </div>

          <div className="ml-auto flex items-center">
            <div className="relative">
              <button
                onClick={() => {}}
                className="flex items-center gap-1 px-3 py-2 text-gray-400 hover:text-purple-400 transition-colors"
              >
                <Plus className="w-3 h-3" />
                <ChevronDown className="w-3 h-3" />
              </button>
              <div className="absolute right-0 top-full mt-1 bg-gray-800 border border-gray-700 rounded-md shadow-lg z-10 hidden group-hover:block">
                {(["PowerShell", "CMD", "Bash", "Git Bash"] as const).map((shell) => (
                  <button
                    key={shell}
                    onClick={() => createNewTab(shell)}
                    className="block w-full text-left px-3 py-2 text-sm text-gray-300 hover:bg-gray-700 first:rounded-t-md last:rounded-b-md"
                  >
                    {shell}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Terminal Content */}
        <div 
          ref={terminalRef}
          className="flex-1 bg-gray-900/50 relative overflow-hidden"
          onClick={focusInput}
        >
          {/* Output Area */}
          <div
            ref={outputRef}
            className="h-full overflow-y-auto p-4 pb-16 font-mono text-sm leading-relaxed custom-scrollbar"
            style={{ fontSize: `${fontSize}px` }}
          >
            {activeTab?.output.map((item, index) => (
              <div key={index} className="mb-1">
                {item.type === "command" && (
                  <div className={`${shellColors[activeTab.shell]} font-medium`}>
                    {item.content}
                  </div>
                )}
                {item.type === "output" && (
                  <div className="text-gray-300 whitespace-pre-wrap">
                    {item.content}
                  </div>
                )}
                {item.type === "error" && (
                  <div className="text-red-400 whitespace-pre-wrap">
                    {item.content}
                  </div>
                )}
                {item.type === "system" && (
                  <div className="text-purple-400 whitespace-pre-wrap">
                    {item.content}
                  </div>
                )}
              </div>
            ))}
          </div>

          {/* Input Area */}
          {activeTab && (
            <div className="absolute bottom-0 left-0 right-0 bg-gray-900/80 backdrop-blur-sm border-t border-purple-500/20 p-4">
              <div className="flex items-center gap-2 font-mono" style={{ fontSize: `${fontSize}px` }}>
                <div className="flex items-center gap-2">
                  <Folder className="w-3 h-3 text-purple-400" />
                  <span className="text-gray-500 text-xs">{activeTab.currentDirectory}</span>
                </div>
              </div>
              <div className="flex items-center gap-2 font-mono mt-1" style={{ fontSize: `${fontSize}px` }}>
                <span className={`${shellColors[activeTab.shell]} font-medium`}>
                  {shellPrompts[activeTab.shell]}
                </span>
                <input
                  ref={inputRef}
                  type="text"
                  value={currentInput}
                  onChange={(e) => setCurrentInput(e.target.value)}
                  onKeyDown={handleKeyDown}
                  className="flex-1 bg-transparent text-gray-300 outline-none caret-purple-400"
                  placeholder="Type a command..."
                  autoFocus
                />
                {activeTab.isRunning && (
                  <button
                    onClick={() => {
                      setTabs(prev => prev.map(tab => 
                        tab.id === activeTab.id 
                          ? { ...tab, isRunning: false }
                          : tab
                      ));
                    }}
                    className="p-1 rounded hover:bg-gray-700/50 text-red-400"
                  >
                    <Square className="w-3 h-3" />
                  </button>
                )}
              </div>
            </div>
          )}
        </div>
      </motion.div>

      <style jsx>{`
        .custom-scrollbar::-webkit-scrollbar {
          width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: rgba(75, 85, 99, 0.3);
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: rgba(147, 51, 234, 0.5);
          border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: rgba(147, 51, 234, 0.7);
        }
      `}</style>
    </div>
  );
}

export default function Demo() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900/20 to-gray-900 p-8 flex items-center justify-center">
      <ProfessionalTerminal 
        onCommand={(command, tabId) => console.log(`Command executed: ${command} in tab ${tabId}`)}
        onTabChange={(tabId) => console.log(`Switched to tab: ${tabId}`)}
        onTabClose={(tabId) => console.log(`Closed tab: ${tabId}`)}
      />
    </div>
  );
}
