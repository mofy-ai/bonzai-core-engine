"use client";

import React, { useEffect, useRef, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Terminal, 
  X, 
  Plus, 
  Settings, 
  Copy, 
  Maximize2, 
  Minimize2,
  RotateCcw,
  Play,
  Square,
  ChevronRight,
  Folder,
  Home
} from 'lucide-react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';

interface TerminalTab {
  id: string;
  title: string;
  shell: string;
  isActive: boolean;
  output: string[];
  currentDirectory: string;
  isRunning: boolean;
}

interface ProfessionalTerminalProps {
  className?: string;
  defaultShell?: string;
  theme?: 'dark' | 'purple';
}

const SHELL_TYPES = [
  { id: 'powershell', name: 'PowerShell', icon: '🔷' },
  { id: 'cmd', name: 'Command Prompt', icon: '⚫' },
  { id: 'bash', name: 'Bash', icon: '🐧' },
  { id: 'gitbash', name: 'Git Bash', icon: '🌿' }
];

const WELCOME_MESSAGES = [
  "🐻 Mama bear says: You've got this! Time to code like a champion! 💪",
  "🌟 Ready to make some terminal magic? Let's build something amazing!",
  "💜 Purple power activated! Your coding journey starts here!",
  "🚀 Terminal ready for takeoff! What incredible things will you create today?",
  "✨ Welcome to your coding sanctuary! Every great project starts with a single command!"
];

const MOCK_COMMANDS = {
  'help': () => [
    'Available commands:',
    '  help     - Show this help message',
    '  clear    - Clear the terminal',
    '  ls       - List directory contents',
    '  pwd      - Print working directory',
    '  cd       - Change directory',
    '  echo     - Display text',
    '  date     - Show current date',
    '  whoami   - Show current user',
    '  node -v  - Show Node.js version',
    '  npm -v   - Show npm version'
  ],
  'clear': () => [],
  'ls': () => [
    'Documents/',
    'Downloads/',
    'Pictures/',
    'Projects/',
    'node_modules/',
    'package.json',
    'README.md',
    'src/'
  ],
  'pwd': () => ['/Users/developer/workspace'],
  'date': () => [new Date().toString()],
  'whoami': () => ['developer'],
  'node -v': () => ['v18.17.0'],
  'npm -v': () => ['9.6.7'],
  'echo': (args: string) => [args || '']
};

export function ProfessionalTerminal({ 
  className = '',
  defaultShell = 'powershell',
  theme = 'purple'
}: ProfessionalTerminalProps) {
  const [tabs, setTabs] = useState<TerminalTab[]>([]);
  const [activeTabId, setActiveTabId] = useState<string>('');
  const [isMaximized, setIsMaximized] = useState(false);
  const [fontSize, setFontSize] = useState(14);
  const [commandHistory, setCommandHistory] = useState<string[]>([]);
  const [historyIndex, setHistoryIndex] = useState(-1);
  const [currentInput, setCurrentInput] = useState('');
  const terminalRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const createNewTab = useCallback((shell: string = defaultShell) => {
    const newTab: TerminalTab = {
      id: `tab-${Date.now()}`,
      title: `${SHELL_TYPES.find(s => s.id === shell)?.name || 'Terminal'}`,
      shell,
      isActive: true,
      output: [
        WELCOME_MESSAGES[Math.floor(Math.random() * WELCOME_MESSAGES.length)],
        '',
        `${SHELL_TYPES.find(s => s.id === shell)?.name || 'Terminal'} initialized successfully!`,
        'Type "help" for available commands.',
        ''
      ],
      currentDirectory: '/Users/developer/workspace',
      isRunning: false
    };

    setTabs(prev => {
      const updated = prev.map(tab => ({ ...tab, isActive: false }));
      return [...updated, newTab];
    });
    setActiveTabId(newTab.id);
  }, [defaultShell]);

  const closeTab = useCallback((tabId: string) => {
    setTabs(prev => {
      const filtered = prev.filter(tab => tab.id !== tabId);
      if (filtered.length === 0) {
        createNewTab();
        return prev;
      }
      
      if (activeTabId === tabId && filtered.length > 0) {
        const newActiveTab = filtered[filtered.length - 1];
        setActiveTabId(newActiveTab.id);
      }
      
      return filtered;
    });
  }, [activeTabId, createNewTab]);

  const executeCommand = useCallback((command: string, tabId: string) => {
    if (!command.trim()) return;

    setCommandHistory(prev => [...prev, command]);
    setHistoryIndex(-1);

    setTabs(prev => prev.map(tab => {
      if (tab.id !== tabId) return tab;

      const [cmd, ...args] = command.trim().split(' ');
      const argString = args.join(' ');
      
      let result: string[] = [];
      
      if (cmd === 'clear') {
        return {
          ...tab,
          output: []
        };
      }

      if (MOCK_COMMANDS[cmd as keyof typeof MOCK_COMMANDS]) {
        if (cmd === 'echo') {
          result = MOCK_COMMANDS[cmd](argString);
        } else {
          result = (MOCK_COMMANDS[cmd as keyof typeof MOCK_COMMANDS] as () => string[])();
        }
      } else {
        result = [`Command not found: ${cmd}. Type "help" for available commands.`];
      }

      return {
        ...tab,
        output: [
          ...tab.output,
          `${tab.currentDirectory} $ ${command}`,
          ...result,
          ''
        ]
      };
    }));
  }, []);

  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {
    const activeTab = tabs.find(tab => tab.id === activeTabId);
    if (!activeTab) return;

    if (e.key === 'Enter') {
      executeCommand(currentInput, activeTabId);
      setCurrentInput('');
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (commandHistory.length > 0) {
        const newIndex = historyIndex === -1 ? commandHistory.length - 1 : Math.max(0, historyIndex - 1);
        setHistoryIndex(newIndex);
        setCurrentInput(commandHistory[newIndex]);
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (historyIndex >= 0) {
        const newIndex = historyIndex + 1;
        if (newIndex >= commandHistory.length) {
          setHistoryIndex(-1);
          setCurrentInput('');
        } else {
          setHistoryIndex(newIndex);
          setCurrentInput(commandHistory[newIndex]);
        }
      }
    } else if (e.ctrlKey && e.key === 'l') {
      e.preventDefault();
      executeCommand('clear', activeTabId);
    } else if (e.ctrlKey && e.key === 'c') {
      e.preventDefault();
      setTabs(prev => prev.map(tab => 
        tab.id === activeTabId 
          ? { ...tab, output: [...tab.output, '^C', ''], isRunning: false }
          : tab
      ));
      setCurrentInput('');
    }
  }, [currentInput, activeTabId, tabs, commandHistory, historyIndex, executeCommand]);

  const copyToClipboard = useCallback(async () => {
    const activeTab = tabs.find(tab => tab.id === activeTabId);
    if (activeTab) {
      try {
        await navigator.clipboard.writeText(activeTab.output.join('\n'));
      } catch (err) {
        console.error('Failed to copy to clipboard:', err);
      }
    }
  }, [tabs, activeTabId]);

  useEffect(() => {
    if (tabs.length === 0) {
      createNewTab();
    }
  }, [tabs.length, createNewTab]);

  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [tabs]);

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, [activeTabId]);

  const activeTab = tabs.find(tab => tab.id === activeTabId);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`
        relative bg-black/95 backdrop-blur-xl rounded-2xl border border-purple-500/30 
        shadow-2xl shadow-purple-500/20 overflow-hidden font-mono text-sm
        ${isMaximized ? 'fixed inset-4 z-50' : 'w-full h-[600px]'}
        ${className}
      `}
    >
      {/* Header */}
      <div className="flex items-center justify-between p-4 bg-gradient-to-r from-purple-900/50 to-indigo-900/50 border-b border-purple-500/30">
        <div className="flex items-center gap-3">
          <div className="flex items-center gap-2">
            <div className="w-3 h-3 rounded-full bg-red-500"></div>
            <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
            <div className="w-3 h-3 rounded-full bg-green-500"></div>
          </div>
          <Terminal className="w-5 h-5 text-purple-300" />
          <span className="text-purple-100 font-semibold">Professional Terminal</span>
        </div>

        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setFontSize(prev => Math.max(10, prev - 1))}
            className="text-purple-300 hover:text-white hover:bg-purple-500/20"
          >
            A-
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setFontSize(prev => Math.min(20, prev + 1))}
            className="text-purple-300 hover:text-white hover:bg-purple-500/20"
          >
            A+
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={copyToClipboard}
            className="text-purple-300 hover:text-white hover:bg-purple-500/20"
          >
            <Copy className="w-4 h-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsMaximized(!isMaximized)}
            className="text-purple-300 hover:text-white hover:bg-purple-500/20"
          >
            {isMaximized ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
          </Button>
        </div>
      </div>

      {/* Tabs */}
      <Tabs value={activeTabId} onValueChange={setActiveTabId} className="flex flex-col h-full">
        <div className="flex items-center justify-between px-4 py-2 bg-black/50 border-b border-purple-500/20">
          <TabsList className="bg-transparent p-0 h-auto">
            {tabs.map((tab) => (
              <div key={tab.id} className="flex items-center">
                <TabsTrigger
                  value={tab.id}
                  className="
                    relative flex items-center gap-2 px-4 py-2 text-purple-200 
                    data-[state=active]:bg-purple-500/20 data-[state=active]:text-white
                    hover:bg-purple-500/10 transition-all rounded-lg mr-1
                  "
                >
                  <span className="text-xs">
                    {SHELL_TYPES.find(s => s.id === tab.shell)?.icon}
                  </span>
                  <span className="text-xs font-medium">{tab.title}</span>
                  {tab.isRunning && (
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                  )}
                </TabsTrigger>
                {tabs.length > 1 && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => closeTab(tab.id)}
                    className="w-6 h-6 p-0 text-purple-300 hover:text-red-400 hover:bg-red-500/20 ml-1"
                  >
                    <X className="w-3 h-3" />
                  </Button>
                )}
              </div>
            ))}
          </TabsList>

          <div className="flex items-center gap-2">
            <select
              onChange={(e) => createNewTab(e.target.value)}
              className="bg-purple-900/50 border border-purple-500/30 rounded px-2 py-1 text-xs text-purple-100"
              value=""
            >
              <option value="" disabled>New Terminal</option>
              {SHELL_TYPES.map(shell => (
                <option key={shell.id} value={shell.id}>
                  {shell.icon} {shell.name}
                </option>
              ))}
            </select>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => createNewTab()}
              className="text-purple-300 hover:text-white hover:bg-purple-500/20"
            >
              <Plus className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {/* Terminal Content */}
        <div className="flex-1 flex flex-col overflow-hidden">
          {tabs.map((tab) => (
            <TabsContent
              key={tab.id}
              value={tab.id}
              className="flex-1 flex flex-col m-0 data-[state=active]:flex data-[state=inactive]:hidden"
            >
              {/* Status Bar */}
              <div className="flex items-center justify-between px-4 py-2 bg-purple-900/30 border-b border-purple-500/20">
                <div className="flex items-center gap-3 text-xs text-purple-200">
                  <div className="flex items-center gap-1">
                    <Folder className="w-3 h-3" />
                    <span>{tab.currentDirectory}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <span className="text-purple-400">Shell:</span>
                    <span>{SHELL_TYPES.find(s => s.id === tab.shell)?.name}</span>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => executeCommand('clear', tab.id)}
                    className="text-purple-300 hover:text-white hover:bg-purple-500/20 text-xs"
                  >
                    <RotateCcw className="w-3 h-3 mr-1" />
                    Clear
                  </Button>
                </div>
              </div>

              {/* Terminal Output */}
              <div
                ref={terminalRef}
                className="flex-1 p-4 overflow-y-auto bg-black/80 text-green-400"
                style={{ fontSize: `${fontSize}px` }}
              >
                <div className="space-y-1">
                  {tab.output.map((line, index) => (
                    <div key={index} className="whitespace-pre-wrap break-words">
                      {line.startsWith('🐻') || line.startsWith('🌟') || line.startsWith('💜') || line.startsWith('🚀') || line.startsWith('✨') ? (
                        <span className="text-purple-300 font-semibold">{line}</span>
                      ) : line.includes('$') ? (
                        <span className="text-blue-300">{line}</span>
                      ) : line.startsWith('Command not found') ? (
                        <span className="text-red-400">{line}</span>
                      ) : (
                        <span className="text-gray-300">{line}</span>
                      )}
                    </div>
                  ))}
                  
                  {/* Input Line */}
                  <div className="flex items-center gap-2 mt-2">
                    <span className="text-blue-300">{tab.currentDirectory} $</span>
                    <input
                      ref={inputRef}
                      type="text"
                      value={currentInput}
                      onChange={(e) => setCurrentInput(e.target.value)}
                      onKeyDown={handleKeyDown}
                      className="flex-1 bg-transparent text-green-400 outline-none caret-green-400"
                      style={{ fontSize: `${fontSize}px` }}
                      autoFocus
                    />
                    <div className="w-2 h-5 bg-green-400 animate-pulse"></div>
                  </div>
                </div>
              </div>
            </TabsContent>
          ))}
        </div>
      </Tabs>

      {/* Glassmorphism overlay */}
      <div className="absolute inset-0 bg-gradient-to-br from-purple-500/5 to-indigo-500/5 pointer-events-none"></div>
    </motion.div>
  );
}

export default function Component() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-black to-indigo-900 p-8">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4">
            Professional Terminal Component
          </h1>
          <p className="text-purple-200 text-lg">
            Full-featured terminal with multiple shells, tabs, and glassmorphism design
          </p>
        </div>
        
        <ProfessionalTerminal />
        
        <div className="mt-8 text-center text-purple-300 text-sm">
          <p>💡 Try commands: help, ls, pwd, clear, echo "hello world"</p>
          <p>⌨️ Keyboard shortcuts: Ctrl+L (clear), Ctrl+C (cancel), ↑↓ (history)</p>
        </div>
      </div>
    </div>
  );
}
