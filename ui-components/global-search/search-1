import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { 
  Search, 
  Replace, 
  ChevronDown, 
  ChevronRight, 
  History, 
  Settings, 
  X, 
  FileText, 
  Regex, 
  CaseSensitive, 
  WholeWord,
  Filter,
  Loader2,
  Heart
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { ScrollArea } from '@/components/ui/scroll-area';

interface SearchMatch {
  line: number;
  column: number;
  text: string;
  matchStart: number;
  matchEnd: number;
  context: string;
}

interface FileResult {
  path: string;
  matches: SearchMatch[];
  isExpanded: boolean;
}

interface SearchOptions {
  caseSensitive: boolean;
  wholeWord: boolean;
  regex: boolean;
  includePatterns: string[];
  excludePatterns: string[];
}

interface SearchHistoryItem {
  query: string;
  replaceText?: string;
  timestamp: Date;
  options: SearchOptions;
}

interface GlobalSearchPanelProps {
  onOpenFile?: (path: string, line?: number, column?: number) => void;
  onSearch?: (query: string, options: SearchOptions) => Promise<FileResult[]>;
  onReplace?: (query: string, replaceText: string, options: SearchOptions) => Promise<void>;
  className?: string;
}

const GlobalSearchPanel: React.FC<GlobalSearchPanelProps> = ({
  onOpenFile = () => {},
  onSearch = async () => [],
  onReplace = async () => {},
  className = ""
}) => {
  const [searchQuery, setSearchQuery] = useState("");
  const [replaceText, setReplaceText] = useState("");
  const [isReplaceMode, setIsReplaceMode] = useState(false);
  const [searchResults, setSearchResults] = useState<FileResult[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [searchProgress, setSearchProgress] = useState(0);
  const [searchHistory, setSearchHistory] = useState<SearchHistoryItem[]>([]);
  const [showHistory, setShowHistory] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);
  
  const [searchOptions, setSearchOptions] = useState<SearchOptions>({
    caseSensitive: false,
    wholeWord: false,
    regex: false,
    includePatterns: ['*'],
    excludePatterns: ['node_modules', '.git', '*.log']
  });

  const searchInputRef = useRef<HTMLInputElement>(null);
  const replaceInputRef = useRef<HTMLInputElement>(null);

  // Mock data for demonstration
  const mockSearchResults: FileResult[] = [
    {
      path: 'src/components/Editor.tsx',
      isExpanded: true,
      matches: [
        {
          line: 42,
          column: 15,
          text: 'const searchTerm = "example";',
          matchStart: 19,
          matchEnd: 26,
          context: 'function handleSearch() {\n  const searchTerm = "example";\n  return searchTerm;'
        },
        {
          line: 58,
          column: 8,
          text: 'if (searchTerm.length > 0) {',
          matchStart: 4,
          matchEnd: 14,
          context: 'useEffect(() => {\n  if (searchTerm.length > 0) {\n    performSearch();'
        }
      ]
    },
    {
      path: 'src/utils/search.ts',
      isExpanded: false,
      matches: [
        {
          line: 12,
          column: 20,
          text: 'export function searchFiles(query: string) {',
          matchStart: 16,
          matchEnd: 22,
          context: 'import { FileSystem } from "./fs";\n\nexport function searchFiles(query: string) {\n  return query.toLowerCase();'
        }
      ]
    }
  ];

  const totalMatches = useMemo(() => {
    return searchResults.reduce((total, file) => total + file.matches.length, 0);
  }, [searchResults]);

  const handleSearch = useCallback(async () => {
    if (!searchQuery.trim()) return;

    setIsSearching(true);
    setSearchProgress(0);

    // Simulate search progress
    const progressInterval = setInterval(() => {
      setSearchProgress(prev => {
        if (prev >= 90) {
          clearInterval(progressInterval);
          return 90;
        }
        return prev + 10;
      });
    }, 100);

    try {
      // Use mock data for demonstration
      await new Promise(resolve => setTimeout(resolve, 1000));
      setSearchResults(mockSearchResults);
      
      // Add to history
      const historyItem: SearchHistoryItem = {
        query: searchQuery,
        replaceText: isReplaceMode ? replaceText : undefined,
        timestamp: new Date(),
        options: { ...searchOptions }
      };
      
      setSearchHistory(prev => [historyItem, ...prev.slice(0, 9)]);
    } catch (error) {
      console.error('Search failed:', error);
    } finally {
      clearInterval(progressInterval);
      setSearchProgress(100);
      setIsSearching(false);
    }
  }, [searchQuery, replaceText, isReplaceMode, searchOptions]);

  const handleReplace = useCallback(async () => {
    if (!searchQuery.trim() || !replaceText.trim()) return;

    setIsSearching(true);
    try {
      await onReplace(searchQuery, replaceText, searchOptions);
      await handleSearch(); // Refresh results
    } catch (error) {
      console.error('Replace failed:', error);
    } finally {
      setIsSearching(false);
    }
  }, [searchQuery, replaceText, searchOptions, onReplace, handleSearch]);

  const toggleFileExpansion = useCallback((filePath: string) => {
    setSearchResults(prev => 
      prev.map(file => 
        file.path === filePath 
          ? { ...file, isExpanded: !file.isExpanded }
          : file
      )
    );
  }, []);

  const highlightMatch = useCallback((text: string, matchStart: number, matchEnd: number) => {
    const before = text.slice(0, matchStart);
    const match = text.slice(matchStart, matchEnd);
    const after = text.slice(matchEnd);
    
    return (
      <span className="font-mono text-sm">
        {before}
        <span className="bg-purple-500/30 text-purple-200 px-1 rounded">
          {match}
        </span>
        {after}
      </span>
    );
  }, []);

  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
    if (e.ctrlKey || e.metaKey) {
      if (e.key === 'f') {
        e.preventDefault();
        setIsReplaceMode(false);
        searchInputRef.current?.focus();
      } else if (e.key === 'h') {
        e.preventDefault();
        setIsReplaceMode(true);
        searchInputRef.current?.focus();
      } else if (e.key === 'Enter') {
        e.preventDefault();
        handleSearch();
      }
    }
  }, [handleSearch]);

  useEffect(() => {
    document.addEventListener('keydown', handleKeyDown as any);
    return () => document.removeEventListener('keydown', handleKeyDown as any);
  }, [handleKeyDown]);

  return (
    <div className={`w-full max-w-4xl mx-auto bg-background/80 backdrop-blur-xl border border-purple-500/20 rounded-lg shadow-2xl ${className}`}>
      {/* Header */}
      <div className="p-4 border-b border-purple-500/20">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold text-foreground flex items-center gap-2">
            <Search className="w-5 h-5 text-purple-400" />
            Global Search
          </h2>
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsReplaceMode(!isReplaceMode)}
              className="text-purple-400 hover:text-purple-300"
            >
              <Replace className="w-4 h-4" />
            </Button>
            <Popover open={showAdvanced} onOpenChange={setShowAdvanced}>
              <PopoverTrigger asChild>
                <Button variant="ghost" size="sm" className="text-purple-400 hover:text-purple-300">
                  <Settings className="w-4 h-4" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-80 bg-background/95 backdrop-blur-xl border-purple-500/20">
                <div className="space-y-4">
                  <h3 className="font-medium text-foreground">Search Options</h3>
                  <div className="space-y-3">
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        id="case-sensitive"
                        checked={searchOptions.caseSensitive}
                        onCheckedChange={(checked) => 
                          setSearchOptions(prev => ({ ...prev, caseSensitive: !!checked }))
                        }
                      />
                      <label htmlFor="case-sensitive" className="text-sm text-foreground">
                        Case sensitive
                      </label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        id="whole-word"
                        checked={searchOptions.wholeWord}
                        onCheckedChange={(checked) => 
                          setSearchOptions(prev => ({ ...prev, wholeWord: !!checked }))
                        }
                      />
                      <label htmlFor="whole-word" className="text-sm text-foreground">
                        Whole word
                      </label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        id="regex"
                        checked={searchOptions.regex}
                        onCheckedChange={(checked) => 
                          setSearchOptions(prev => ({ ...prev, regex: !!checked }))
                        }
                      />
                      <label htmlFor="regex" className="text-sm text-foreground">
                        Regular expression
                      </label>
                    </div>
                  </div>
                  <Separator />
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-foreground">Exclude patterns</label>
                    <Input
                      placeholder="node_modules, .git, *.log"
                      value={searchOptions.excludePatterns.join(', ')}
                      onChange={(e) => 
                        setSearchOptions(prev => ({
                          ...prev,
                          excludePatterns: e.target.value.split(',').map(s => s.trim()).filter(Boolean)
                        }))
                      }
                      className="bg-background/50 border-purple-500/20"
                    />
                  </div>
                </div>
              </PopoverContent>
            </Popover>
          </div>
        </div>

        {/* Search Input */}
        <div className="space-y-3">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-purple-400" />
            <Input
              ref={searchInputRef}
              placeholder="Search across all files..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
              className="pl-10 pr-20 bg-background/50 border-purple-500/20 focus:border-purple-400"
            />
            <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center gap-1">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSearchOptions(prev => ({ ...prev, caseSensitive: !prev.caseSensitive }))}
                className={`w-6 h-6 p-0 ${searchOptions.caseSensitive ? 'text-purple-400' : 'text-muted-foreground'}`}
              >
                <CaseSensitive className="w-3 h-3" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSearchOptions(prev => ({ ...prev, wholeWord: !prev.wholeWord }))}
                className={`w-6 h-6 p-0 ${searchOptions.wholeWord ? 'text-purple-400' : 'text-muted-foreground'}`}
              >
                <WholeWord className="w-3 h-3" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSearchOptions(prev => ({ ...prev, regex: !prev.regex }))}
                className={`w-6 h-6 p-0 ${searchOptions.regex ? 'text-purple-400' : 'text-muted-foreground'}`}
              >
                <Regex className="w-3 h-3" />
              </Button>
              <Popover open={showHistory} onOpenChange={setShowHistory}>
                <PopoverTrigger asChild>
                  <Button variant="ghost" size="sm" className="w-6 h-6 p-0 text-muted-foreground hover:text-purple-400">
                    <History className="w-3 h-3" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-80 bg-background/95 backdrop-blur-xl border-purple-500/20">
                  <div className="space-y-2">
                    <h3 className="font-medium text-foreground">Search History</h3>
                    <ScrollArea className="h-40">
                      {searchHistory.length > 0 ? (
                        <div className="space-y-1">
                          {searchHistory.map((item, index) => (
                            <Button
                              key={index}
                              variant="ghost"
                              className="w-full justify-start text-left h-auto p-2"
                              onClick={() => {
                                setSearchQuery(item.query);
                                if (item.replaceText) {
                                  setReplaceText(item.replaceText);
                                  setIsReplaceMode(true);
                                }
                                setSearchOptions(item.options);
                                setShowHistory(false);
                              }}
                            >
                              <div className="truncate">
                                <div className="text-sm text-foreground">{item.query}</div>
                                {item.replaceText && (
                                  <div className="text-xs text-muted-foreground">→ {item.replaceText}</div>
                                )}
                              </div>
                            </Button>
                          ))}
                        </div>
                      ) : (
                        <div className="text-sm text-muted-foreground text-center py-4">
                          No search history yet
                        </div>
                      )}
                    </ScrollArea>
                  </div>
                </PopoverContent>
              </Popover>
            </div>
          </div>

          {/* Replace Input */}
          {isReplaceMode && (
            <div className="relative">
              <Replace className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-purple-400" />
              <Input
                ref={replaceInputRef}
                placeholder="Replace with..."
                value={replaceText}
                onChange={(e) => setReplaceText(e.target.value)}
                className="pl-10 bg-background/50 border-purple-500/20 focus:border-purple-400"
              />
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex items-center gap-2">
            <Button
              onClick={handleSearch}
              disabled={!searchQuery.trim() || isSearching}
              className="bg-purple-600 hover:bg-purple-700 text-white"
            >
              {isSearching ? (
                <Loader2 className="w-4 h-4 animate-spin mr-2" />
              ) : (
                <Search className="w-4 h-4 mr-2" />
              )}
              Search
            </Button>
            {isReplaceMode && (
              <Button
                onClick={handleReplace}
                disabled={!searchQuery.trim() || !replaceText.trim() || isSearching}
                variant="outline"
                className="border-purple-500/20 hover:bg-purple-500/10"
              >
                Replace All
              </Button>
            )}
            {searchResults.length > 0 && (
              <Badge variant="secondary" className="bg-purple-500/20 text-purple-200">
                {totalMatches} matches in {searchResults.length} files
              </Badge>
            )}
          </div>

          {/* Progress Bar */}
          {isSearching && (
            <Progress value={searchProgress} className="h-1 bg-purple-500/20" />
          )}
        </div>
      </div>

      {/* Results */}
      <ScrollArea className="h-96">
        <div className="p-4">
          {searchResults.length > 0 ? (
            <div className="space-y-2">
              {searchResults.map((file) => (
                <Collapsible
                  key={file.path}
                  open={file.isExpanded}
                  onOpenChange={() => toggleFileExpansion(file.path)}
                >
                  <CollapsibleTrigger asChild>
                    <Button
                      variant="ghost"
                      className="w-full justify-start p-2 h-auto hover:bg-purple-500/10"
                    >
                      {file.isExpanded ? (
                        <ChevronDown className="w-4 h-4 mr-2 text-purple-400" />
                      ) : (
                        <ChevronRight className="w-4 h-4 mr-2 text-purple-400" />
                      )}
                      <FileText className="w-4 h-4 mr-2 text-purple-400" />
                      <span className="text-foreground font-medium">{file.path}</span>
                      <Badge variant="secondary" className="ml-auto bg-purple-500/20 text-purple-200">
                        {file.matches.length}
                      </Badge>
                    </Button>
                  </CollapsibleTrigger>
                  <CollapsibleContent className="ml-6 mt-2 space-y-1">
                    {file.matches.map((match, index) => (
                      <Button
                        key={index}
                        variant="ghost"
                        className="w-full justify-start p-2 h-auto text-left hover:bg-purple-500/5"
                        onClick={() => onOpenFile(file.path, match.line, match.column)}
                      >
                        <div className="w-full">
                          <div className="flex items-center gap-2 mb-1">
                            <Badge variant="outline" className="text-xs border-purple-500/20">
                              {match.line}:{match.column}
                            </Badge>
                          </div>
                          <div className="text-sm text-muted-foreground">
                            {highlightMatch(match.text, match.matchStart, match.matchEnd)}
                          </div>
                        </div>
                      </Button>
                    ))}
                  </CollapsibleContent>
                </Collapsible>
              ))}
            </div>
          ) : searchQuery && !isSearching ? (
            <div className="text-center py-8">
              <Heart className="w-12 h-12 mx-auto text-purple-400 mb-4" />
              <h3 className="text-lg font-medium text-foreground mb-2">No results found</h3>
              <p className="text-muted-foreground">
                Don't worry, mama bear believes in you! Try adjusting your search terms or options.
              </p>
            </div>
          ) : !searchQuery ? (
            <div className="text-center py-8">
              <Search className="w-12 h-12 mx-auto text-purple-400 mb-4" />
              <h3 className="text-lg font-medium text-foreground mb-2">Start searching</h3>
              <p className="text-muted-foreground">
                Enter a search term to find matches across your entire workspace.
              </p>
              <div className="mt-4 text-sm text-muted-foreground">
                <kbd className="px-2 py-1 bg-purple-500/20 rounded text-xs">Ctrl+F</kbd> to search,{' '}
                <kbd className="px-2 py-1 bg-purple-500/20 rounded text-xs">Ctrl+H</kbd> to replace
              </div>
            </div>
          ) : null}
        </div>
      </ScrollArea>
    </div>
  );
};

export default GlobalSearchPanel;
