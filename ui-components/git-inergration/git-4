"use client";

import React, { useState, useEffect, useRef, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  GitBranch,
  GitCommit,
  GitMerge,
  GitPullRequest,
  Plus,
  Minus,
  FileText,
  Folder,
  FolderOpen,
  Check,
  X,
  Clock,
  User,
  Calendar,
  Hash,
  Eye,
  Download,
  Upload,
  RefreshCw,
  Settings,
  Search,
  Filter,
  ChevronDown,
  ChevronRight,
  ChevronUp,
  MoreHorizontal,
  Copy,
  Trash2,
  Edit,
  Save,
  AlertCircle,
  CheckCircle,
  XCircle,
  Info,
  Zap,
  Heart,
  Star,
  MessageSquare,
  Code,
  Terminal,
  Archive,
  Bookmark,
  Tag,
  Users,
  Globe,
  Lock,
  Unlock,
  Shield,
  Activity
} from "lucide-react";

// Types
interface GitFile {
  id: string;
  name: string;
  path: string;
  status: 'added' | 'modified' | 'deleted' | 'renamed' | 'untracked';
  staged: boolean;
  changes: number;
  additions: number;
  deletions: number;
  content?: string;
  oldContent?: string;
}

interface GitBranch {
  name: string;
  current: boolean;
  ahead: number;
  behind: number;
  lastCommit: string;
  author: string;
  date: string;
}

interface GitCommit {
  hash: string;
  message: string;
  author: string;
  email: string;
  date: string;
  changes: number;
  additions: number;
  deletions: number;
  files: string[];
  parents: string[];
}

interface GitStash {
  id: string;
  message: string;
  branch: string;
  date: string;
  files: number;
}

interface GitRemote {
  name: string;
  url: string;
  type: 'fetch' | 'push';
}

interface ConflictFile {
  path: string;
  conflicts: Array<{
    start: number;
    end: number;
    current: string;
    incoming: string;
  }>;
}

// Mock data
const mockFiles: GitFile[] = [
  {
    id: '1',
    name: 'App.tsx',
    path: 'src/App.tsx',
    status: 'modified',
    staged: false,
    changes: 15,
    additions: 10,
    deletions: 5,
    content: 'import React from "react";\n\nfunction App() {\n  return <div>Hello World!</div>;\n}\n\nexport default App;'
  },
  {
    id: '2',
    name: 'index.css',
    path: 'src/index.css',
    status: 'modified',
    staged: true,
    changes: 8,
    additions: 8,
    deletions: 0
  },
  {
    id: '3',
    name: 'NewComponent.tsx',
    path: 'src/components/NewComponent.tsx',
    status: 'added',
    staged: false,
    changes: 25,
    additions: 25,
    deletions: 0
  },
  {
    id: '4',
    name: 'OldFile.js',
    path: 'src/utils/OldFile.js',
    status: 'deleted',
    staged: false,
    changes: 12,
    additions: 0,
    deletions: 12
  }
];

const mockBranches: GitBranch[] = [
  {
    name: 'main',
    current: false,
    ahead: 0,
    behind: 2,
    lastCommit: 'feat: add new dashboard',
    author: 'John Doe',
    date: '2 hours ago'
  },
  {
    name: 'feature/git-integration',
    current: true,
    ahead: 3,
    behind: 0,
    lastCommit: 'wip: git panel improvements',
    author: 'You',
    date: '5 minutes ago'
  },
  {
    name: 'bugfix/auth-issue',
    current: false,
    ahead: 1,
    behind: 1,
    lastCommit: 'fix: authentication bug',
    author: 'Jane Smith',
    date: '1 day ago'
  }
];

const mockCommits: GitCommit[] = [
  {
    hash: 'a1b2c3d',
    message: 'feat: add comprehensive Git integration panel with purple glassmorphism design',
    author: 'You',
    email: 'you@example.com',
    date: '5 minutes ago',
    changes: 156,
    additions: 142,
    deletions: 14,
    files: ['src/GitPanel.tsx', 'src/types/git.ts', 'src/utils/git.ts'],
    parents: ['x9y8z7w']
  },
  {
    hash: 'x9y8z7w',
    message: 'refactor: improve file staging animations',
    author: 'You',
    email: 'you@example.com',
    date: '2 hours ago',
    changes: 23,
    additions: 15,
    deletions: 8,
    files: ['src/components/FileStaging.tsx'],
    parents: ['m5n6o7p']
  },
  {
    hash: 'm5n6o7p',
    message: 'fix: resolve merge conflicts in authentication module',
    author: 'Jane Smith',
    email: 'jane@example.com',
    date: '1 day ago',
    changes: 45,
    additions: 30,
    deletions: 15,
    files: ['src/auth/AuthProvider.tsx', 'src/auth/types.ts'],
    parents: ['q3r4s5t']
  }
];

const mockStashes: GitStash[] = [
  {
    id: 'stash@{0}',
    message: 'WIP: working on diff viewer improvements',
    branch: 'feature/git-integration',
    date: '1 hour ago',
    files: 3
  },
  {
    id: 'stash@{1}',
    message: 'Temporary changes for testing',
    branch: 'main',
    date: '2 days ago',
    files: 1
  }
];

const mockRemotes: GitRemote[] = [
  { name: 'origin', url: 'https://github.com/user/repo.git', type: 'fetch' },
  { name: 'origin', url: 'https://github.com/user/repo.git', type: 'push' },
  { name: 'upstream', url: 'https://github.com/original/repo.git', type: 'fetch' }
];

// Mama Bear encouragement messages
const mamaBearMessages = [
  "üêª Great job staging those files! You're becoming a Git master!",
  "üåü Remember to write clear commit messages - your future self will thank you!",
  "üíú Pro tip: Use 'git diff' to review changes before committing!",
  "üöÄ Keep those commits atomic - one feature per commit works best!",
  "üéØ Don't forget to pull before pushing to avoid conflicts!",
  "‚ú® Your Git workflow is looking fantastic! Keep it up!",
  "üî• Hot tip: Use branches for features to keep main clean!",
  "üíé Quality commits make for quality code history!"
];

export default function GitIntegrationPanel() {
  const [activeTab, setActiveTab] = useState<'source' | 'history' | 'branches' | 'stash' | 'remotes'>('source');
  const [files, setFiles] = useState<GitFile[]>(mockFiles);
  const [branches, setBranches] = useState<GitBranch[]>(mockBranches);
  const [commits] = useState<GitCommit[]>(mockCommits);
  const [stashes] = useState<GitStash[]>(mockStashes);
  const [remotes] = useState<GitRemote[]>(mockRemotes);
  const [commitMessage, setCommitMessage] = useState('');
  const [selectedFile, setSelectedFile] = useState<GitFile | null>(null);
  const [showDiff, setShowDiff] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<'all' | 'staged' | 'unstaged'>('all');
  const [isLoading, setIsLoading] = useState(false);
  const [mamaBearMessage, setMamaBearMessage] = useState('');
  const [showConflictResolution, setShowConflictResolution] = useState(false);
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    staged: true,
    unstaged: true,
    untracked: true
  });

  const dragRef = useRef<HTMLDivElement>(null);
  const [draggedFile, setDraggedFile] = useState<GitFile | null>(null);

  // Show mama bear encouragement
  const showMamaBearEncouragement = useCallback(() => {
    const randomMessage = mamaBearMessages[Math.floor(Math.random() * mamaBearMessages.length)];
    setMamaBearMessage(randomMessage);
    setTimeout(() => setMamaBearMessage(''), 4000);
  }, []);

  // File operations
  const stageFile = useCallback((fileId: string) => {
    setFiles(prev => prev.map(file => 
      file.id === fileId ? { ...file, staged: true } : file
    ));
    showMamaBearEncouragement();
  }, [showMamaBearEncouragement]);

  const unstageFile = useCallback((fileId: string) => {
    setFiles(prev => prev.map(file => 
      file.id === fileId ? { ...file, staged: false } : file
    ));
  }, []);

  const stageAllFiles = useCallback(() => {
    setFiles(prev => prev.map(file => ({ ...file, staged: true })));
    showMamaBearEncouragement();
  }, [showMamaBearEncouragement]);

  const unstageAllFiles = useCallback(() => {
    setFiles(prev => prev.map(file => ({ ...file, staged: false })));
  }, []);

  const discardChanges = useCallback((fileId: string) => {
    setFiles(prev => prev.filter(file => file.id !== fileId));
  }, []);

  // Commit operation
  const handleCommit = useCallback(async () => {
    if (!commitMessage.trim()) return;
    
    setIsLoading(true);
    
    // Simulate commit operation
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const stagedFiles = files.filter(file => file.staged);
    if (stagedFiles.length > 0) {
      setFiles(prev => prev.filter(file => !file.staged));
      setCommitMessage('');
      showMamaBearEncouragement();
    }
    
    setIsLoading(false);
  }, [commitMessage, files, showMamaBearEncouragement]);

  // Branch operations
  const switchBranch = useCallback((branchName: string) => {
    setBranches(prev => prev.map(branch => ({
      ...branch,
      current: branch.name === branchName
    })));
    showMamaBearEncouragement();
  }, [showMamaBearEncouragement]);

  const createBranch = useCallback((name: string) => {
    const newBranch: GitBranch = {
      name,
      current: false,
      ahead: 0,
      behind: 0,
      lastCommit: 'Initial commit',
      author: 'You',
      date: 'now'
    };
    setBranches(prev => [...prev, newBranch]);
  }, []);

  // Drag and drop handlers
  const handleDragStart = useCallback((e: React.DragEvent, file: GitFile) => {
    setDraggedFile(file);
    e.dataTransfer.effectAllowed = 'move';
  }, []);

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  }, []);

  const handleDrop = useCallback((e: React.DragEvent, targetStaged: boolean) => {
    e.preventDefault();
    if (draggedFile && draggedFile.staged !== targetStaged) {
      if (targetStaged) {
        stageFile(draggedFile.id);
      } else {
        unstageFile(draggedFile.id);
      }
    }
    setDraggedFile(null);
  }, [draggedFile, stageFile, unstageFile]);

  // Filter files
  const filteredFiles = files.filter(file => {
    const matchesSearch = file.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         file.path.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filterStatus === 'all' || 
                         (filterStatus === 'staged' && file.staged) ||
                         (filterStatus === 'unstaged' && !file.staged);
    return matchesSearch && matchesFilter;
  });

  const stagedFiles = filteredFiles.filter(file => file.staged);
  const unstagedFiles = filteredFiles.filter(file => !file.staged && file.status !== 'untracked');
  const untrackedFiles = filteredFiles.filter(file => file.status === 'untracked');

  // Get status color
  const getStatusColor = (status: GitFile['status']) => {
    switch (status) {
      case 'added': return 'text-green-400';
      case 'modified': return 'text-yellow-400';
      case 'deleted': return 'text-red-400';
      case 'renamed': return 'text-blue-400';
      case 'untracked': return 'text-gray-400';
      default: return 'text-gray-400';
    }
  };

  const getStatusIcon = (status: GitFile['status']) => {
    switch (status) {
      case 'added': return <Plus className="h-3 w-3" />;
      case 'modified': return <Edit className="h-3 w-3" />;
      case 'deleted': return <Minus className="h-3 w-3" />;
      case 'renamed': return <RefreshCw className="h-3 w-3" />;
      case 'untracked': return <FileText className="h-3 w-3" />;
      default: return <FileText className="h-3 w-3" />;
    }
  };

  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  return (
    <div className="w-full max-w-6xl mx-auto h-[800px] bg-gradient-to-br from-purple-900/20 via-purple-800/10 to-indigo-900/20 backdrop-blur-xl border border-purple-500/20 rounded-2xl overflow-hidden shadow-2xl">
      {/* Header */}
      <div className="bg-purple-900/30 backdrop-blur-sm border-b border-purple-500/20 p-4">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <div className="h-8 w-8 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-lg flex items-center justify-center">
              <GitBranch className="h-5 w-5 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold text-white">Git Integration</h1>
              <p className="text-sm text-purple-200">
                {branches.find(b => b.current)?.name || 'main'} ‚Ä¢ {files.filter(f => f.staged).length} staged, {files.filter(f => !f.staged).length} unstaged
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <button className="px-3 py-1.5 bg-purple-600/30 hover:bg-purple-600/50 text-purple-100 rounded-lg text-sm transition-colors backdrop-blur-sm border border-purple-500/30">
              <Download className="h-4 w-4 inline mr-1" />
              Pull
            </button>
            <button className="px-3 py-1.5 bg-purple-600/30 hover:bg-purple-600/50 text-purple-100 rounded-lg text-sm transition-colors backdrop-blur-sm border border-purple-500/30">
              <Upload className="h-4 w-4 inline mr-1" />
              Push
            </button>
            <button className="p-2 bg-purple-600/30 hover:bg-purple-600/50 text-purple-100 rounded-lg transition-colors backdrop-blur-sm border border-purple-500/30">
              <Settings className="h-4 w-4" />
            </button>
          </div>
        </div>

        {/* Tabs */}
        <div className="flex gap-1 bg-purple-900/20 p-1 rounded-lg backdrop-blur-sm">
          {[
            { id: 'source', label: 'Source Control', icon: GitCommit },
            { id: 'history', label: 'History', icon: Clock },
            { id: 'branches', label: 'Branches', icon: GitBranch },
            { id: 'stash', label: 'Stash', icon: Archive },
            { id: 'remotes', label: 'Remotes', icon: Globe }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium transition-all ${
                activeTab === tab.id
                  ? 'bg-purple-600/50 text-white shadow-lg'
                  : 'text-purple-200 hover:text-white hover:bg-purple-600/20'
              }`}
            >
              <tab.icon className="h-4 w-4" />
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* Mama Bear Encouragement */}
      <AnimatePresence>
        {mamaBearMessage && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="bg-gradient-to-r from-purple-600/20 to-pink-600/20 border border-purple-500/30 mx-4 mt-4 p-3 rounded-lg backdrop-blur-sm"
          >
            <p className="text-purple-100 text-sm">{mamaBearMessage}</p>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Content */}
      <div className="flex-1 overflow-hidden">
        {activeTab === 'source' && (
          <div className="h-full flex">
            {/* File List */}
            <div className="w-1/2 border-r border-purple-500/20 flex flex-col">
              {/* Search and Filter */}
              <div className="p-4 border-b border-purple-500/20">
                <div className="flex gap-2 mb-3">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-purple-300" />
                    <input
                      type="text"
                      placeholder="Search files..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 bg-purple-900/20 border border-purple-500/30 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:ring-2 focus:ring-purple-500/50 backdrop-blur-sm"
                    />
                  </div>
                  <select
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value as any)}
                    className="px-3 py-2 bg-purple-900/20 border border-purple-500/30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 backdrop-blur-sm"
                  >
                    <option value="all">All Files</option>
                    <option value="staged">Staged</option>
                    <option value="unstaged">Unstaged</option>
                  </select>
                </div>

                <div className="flex gap-2">
                  <button
                    onClick={stageAllFiles}
                    className="flex-1 px-3 py-2 bg-green-600/30 hover:bg-green-600/50 text-green-100 rounded-lg text-sm transition-colors backdrop-blur-sm border border-green-500/30"
                  >
                    <Plus className="h-4 w-4 inline mr-1" />
                    Stage All
                  </button>
                  <button
                    onClick={unstageAllFiles}
                    className="flex-1 px-3 py-2 bg-red-600/30 hover:bg-red-600/50 text-red-100 rounded-lg text-sm transition-colors backdrop-blur-sm border border-red-500/30"
                  >
                    <Minus className="h-4 w-4 inline mr-1" />
                    Unstage All
                  </button>
                </div>
              </div>

              {/* File Sections */}
              <div className="flex-1 overflow-y-auto">
                {/* Staged Files */}
                {stagedFiles.length > 0 && (
                  <div className="border-b border-purple-500/20">
                    <button
                      onClick={() => toggleSection('staged')}
                      className="w-full flex items-center justify-between p-3 hover:bg-purple-600/10 transition-colors"
                    >
                      <div className="flex items-center gap-2">
                        {expandedSections.staged ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
                        <span className="font-medium text-green-400">Staged Changes</span>
                        <span className="text-xs bg-green-600/20 text-green-300 px-2 py-1 rounded-full">
                          {stagedFiles.length}
                        </span>
                      </div>
                    </button>
                    
                    {expandedSections.staged && (
                      <div
                        onDragOver={handleDragOver}
                        onDrop={(e) => handleDrop(e, true)}
                        className="min-h-[50px] bg-green-600/5"
                      >
                        {stagedFiles.map(file => (
                          <motion.div
                            key={file.id}
                            layout
                            draggable
                            onDragStart={(e) => handleDragStart(e, file)}
                            className="flex items-center justify-between p-3 hover:bg-purple-600/10 cursor-pointer border-l-2 border-green-500/50"
                            onClick={() => setSelectedFile(file)}
                          >
                            <div className="flex items-center gap-3">
                              <div className={`${getStatusColor(file.status)}`}>
                                {getStatusIcon(file.status)}
                              </div>
                              <div>
                                <p className="text-white text-sm font-medium">{file.name}</p>
                                <p className="text-purple-300 text-xs">{file.path}</p>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <span className="text-xs text-purple-300">
                                +{file.additions} -{file.deletions}
                              </span>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  unstageFile(file.id);
                                }}
                                className="p-1 hover:bg-red-600/20 rounded text-red-400"
                              >
                                <Minus className="h-3 w-3" />
                              </button>
                            </div>
                          </motion.div>
                        ))}
                      </div>
                    )}
                  </div>
                )}

                {/* Unstaged Files */}
                {unstagedFiles.length > 0 && (
                  <div className="border-b border-purple-500/20">
                    <button
                      onClick={() => toggleSection('unstaged')}
                      className="w-full flex items-center justify-between p-3 hover:bg-purple-600/10 transition-colors"
                    >
                      <div className="flex items-center gap-2">
                        {expandedSections.unstaged ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
                        <span className="font-medium text-yellow-400">Changes</span>
                        <span className="text-xs bg-yellow-600/20 text-yellow-300 px-2 py-1 rounded-full">
                          {unstagedFiles.length}
                        </span>
                      </div>
                    </button>
                    
                    {expandedSections.unstaged && (
                      <div
                        onDragOver={handleDragOver}
                        onDrop={(e) => handleDrop(e, false)}
                        className="min-h-[50px]"
                      >
                        {unstagedFiles.map(file => (
                          <motion.div
                            key={file.id}
                            layout
                            draggable
                            onDragStart={(e) => handleDragStart(e, file)}
                            className="flex items-center justify-between p-3 hover:bg-purple-600/10 cursor-pointer"
                            onClick={() => setSelectedFile(file)}
                          >
                            <div className="flex items-center gap-3">
                              <div className={`${getStatusColor(file.status)}`}>
                                {getStatusIcon(file.status)}
                              </div>
                              <div>
                                <p className="text-white text-sm font-medium">{file.name}</p>
                                <p className="text-purple-300 text-xs">{file.path}</p>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <span className="text-xs text-purple-300">
                                +{file.additions} -{file.deletions}
                              </span>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  stageFile(file.id);
                                }}
                                className="p-1 hover:bg-green-600/20 rounded text-green-400"
                              >
                                <Plus className="h-3 w-3" />
                              </button>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  discardChanges(file.id);
                                }}
                                className="p-1 hover:bg-red-600/20 rounded text-red-400"
                              >
                                <X className="h-3 w-3" />
                              </button>
                            </div>
                          </motion.div>
                        ))}
                      </div>
                    )}
                  </div>
                )}

                {/* Untracked Files */}
                {untrackedFiles.length > 0 && (
                  <div>
                    <button
                      onClick={() => toggleSection('untracked')}
                      className="w-full flex items-center justify-between p-3 hover:bg-purple-600/10 transition-colors"
                    >
                      <div className="flex items-center gap-2">
                        {expandedSections.untracked ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
                        <span className="font-medium text-gray-400">Untracked Files</span>
                        <span className="text-xs bg-gray-600/20 text-gray-300 px-2 py-1 rounded-full">
                          {untrackedFiles.length}
                        </span>
                      </div>
                    </button>
                    
                    {expandedSections.untracked && (
                      <div>
                        {untrackedFiles.map(file => (
                          <motion.div
                            key={file.id}
                            layout
                            draggable
                            onDragStart={(e) => handleDragStart(e, file)}
                            className="flex items-center justify-between p-3 hover:bg-purple-600/10 cursor-pointer"
                            onClick={() => setSelectedFile(file)}
                          >
                            <div className="flex items-center gap-3">
                              <div className={`${getStatusColor(file.status)}`}>
                                {getStatusIcon(file.status)}
                              </div>
                              <div>
                                <p className="text-white text-sm font-medium">{file.name}</p>
                                <p className="text-purple-300 text-xs">{file.path}</p>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  stageFile(file.id);
                                }}
                                className="p-1 hover:bg-green-600/20 rounded text-green-400"
                              >
                                <Plus className="h-3 w-3" />
                              </button>
                            </div>
                          </motion.div>
                        ))}
                      </div>
                    )}
                  </div>
                )}
              </div>

              {/* Commit Section */}
              <div className="border-t border-purple-500/20 p-4">
                <div className="mb-3">
                  <div className="flex items-center justify-between mb-2">
                    <label className="text-sm font-medium text-purple-200">Commit Message</label>
                    <span className="text-xs text-purple-300">{commitMessage.length}/72</span>
                  </div>
                  <textarea
                    value={commitMessage}
                    onChange={(e) => setCommitMessage(e.target.value)}
                    placeholder="Enter commit message... üêª Make it descriptive!"
                    className="w-full h-20 p-3 bg-purple-900/20 border border-purple-500/30 rounded-lg text-white placeholder-purple-300 focus:outline-none focus:ring-2 focus:ring-purple-500/50 backdrop-blur-sm resize-none"
                  />
                </div>
                
                <button
                  onClick={handleCommit}
                  disabled={!commitMessage.trim() || stagedFiles.length === 0 || isLoading}
                  className="w-full px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 disabled:from-gray-600 disabled:to-gray-700 text-white rounded-lg font-medium transition-all disabled:cursor-not-allowed flex items-center justify-center gap-2"
                >
                  {isLoading ? (
                    <>
                      <RefreshCw className="h-4 w-4 animate-spin" />
                      Committing...
                    </>
                  ) : (
                    <>
                      <GitCommit className="h-4 w-4" />
                      Commit ({stagedFiles.length})
                    </>
                  )}
                </button>
              </div>
            </div>

            {/* Diff Viewer */}
            <div className="w-1/2 flex flex-col">
              {selectedFile ? (
                <>
                  <div className="border-b border-purple-500/20 p-4">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <div className={`${getStatusColor(selectedFile.status)}`}>
                          {getStatusIcon(selectedFile.status)}
                        </div>
                        <h3 className="font-medium text-white">{selectedFile.name}</h3>
                        <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(selectedFile.status)} bg-current/10`}>
                          {selectedFile.status}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => setShowDiff(!showDiff)}
                          className="px-3 py-1 bg-purple-600/30 hover:bg-purple-600/50 text-purple-100 rounded text-sm transition-colors"
                        >
                          <Eye className="h-3 w-3 inline mr-1" />
                          {showDiff ? 'Hide' : 'Show'} Diff
                        </button>
                        <button className="p-1 hover:bg-purple-600/20 rounded text-purple-300">
                          <Copy className="h-4 w-4" />
                        </button>
                      </div>
                    </div>
                    <p className="text-sm text-purple-300">{selectedFile.path}</p>
                    <div className="flex items-center gap-4 mt-2 text-xs">
                      <span className="text-green-400">+{selectedFile.additions} additions</span>
                      <span className="text-red-400">-{selectedFile.deletions} deletions</span>
                      <span className="text-purple-300">{selectedFile.changes} changes</span>
                    </div>
                  </div>
                  
                  <div className="flex-1 overflow-auto p-4">
                    {showDiff && selectedFile.content ? (
                      <div className="bg-gray-900/50 rounded-lg p-4 font-mono text-sm">
                        <div className="space-y-1">
                          {selectedFile.content.split('\n').map((line, index) => (
                            <div key={index} className="flex">
                              <span className="text-gray-500 w-8 text-right mr-4">{index + 1}</span>
                              <span className="text-white">{line}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-full text-purple-300">
                        <div className="text-center">
                          <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
                          <p>Select "Show Diff" to view file changes</p>
                        </div>
                      </div>
                    )}
                  </div>
                </>
              ) : (
                <div className="flex items-center justify-center h-full text-purple-300">
                  <div className="text-center">
                    <Code className="h-12 w-12 mx-auto mb-4 opacity-50" />
                    <p>Select a file to view changes</p>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'history' && (
          <div className="p-4 h-full overflow-y-auto">
            <div className="space-y-4">
              {commits.map((commit, index) => (
                <motion.div
                  key={commit.hash}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="bg-purple-900/20 backdrop-blur-sm border border-purple-500/20 rounded-lg p-4 hover:bg-purple-900/30 transition-colors"
                >
                  <div className="flex items-start gap-4">
                    <div className="flex-shrink-0">
                      <div className="h-8 w-8 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-full flex items-center justify-center">
                        <GitCommit className="h-4 w-4 text-white" />
                      </div>
                      {index < commits.length - 1 && (
                        <div className="w-px h-8 bg-purple-500/30 mx-auto mt-2"></div>
                      )}
                    </div>
                    
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-medium text-white">{commit.message}</h3>
                        <div className="flex items-center gap-2">
                          <span className="text-xs bg-purple-600/20 text-purple-300 px-2 py-1 rounded-full font-mono">
                            {commit.hash}
                          </span>
                          <button className="p-1 hover:bg-purple-600/20 rounded text-purple-300">
                            <Copy className="h-3 w-3" />
                          </button>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-4 text-sm text-purple-300 mb-2">
                        <div className="flex items-center gap-1">
                          <User className="h-3 w-3" />
                          {commit.author}
                        </div>
                        <div className="flex items-center gap-1">
                          <Calendar className="h-3 w-3" />
                          {commit.date}
                        </div>
                        <div className="flex items-center gap-2">
                          <span className="text-green-400">+{commit.additions}</span>
                          <span className="text-red-400">-{commit.deletions}</span>
                        </div>
                      </div>
                      
                      <div className="flex flex-wrap gap-1">
                        {commit.files.map(file => (
                          <span key={file} className="text-xs bg-gray-600/20 text-gray-300 px-2 py-1 rounded">
                            {file.split('/').pop()}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'branches' && (
          <div className="p-4 h-full overflow-y-auto">
            <div className="mb-4">
              <button className="w-full px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white rounded-lg font-medium transition-all flex items-center justify-center gap-2">
                <Plus className="h-4 w-4" />
                Create New Branch
              </button>
            </div>
            
            <div className="space-y-2">
              {branches.map((branch, index) => (
                <motion.div
                  key={branch.name}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className={`p-4 rounded-lg border transition-all cursor-pointer ${
                    branch.current
                      ? 'bg-purple-600/20 border-purple-500/50'
                      : 'bg-purple-900/20 border-purple-500/20 hover:bg-purple-900/30'
                  }`}
                  onClick={() => !branch.current && switchBranch(branch.name)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <GitBranch className={`h-4 w-4 ${branch.current ? 'text-purple-400' : 'text-purple-300'}`} />
                      <span className={`font-medium ${branch.current ? 'text-white' : 'text-purple-200'}`}>
                        {branch.name}
                      </span>
                      {branch.current && (
                        <span className="text-xs bg-purple-600/30 text-purple-200 px-2 py-1 rounded-full">
                          current
                        </span>
                      )}
                    </div>
                    
                    <div className="flex items-center gap-2">
                      {branch.ahead > 0 && (
                        <span className="text-xs bg-green-600/20 text-green-300 px-2 py-1 rounded-full">
                          ‚Üë{branch.ahead}
                        </span>
                      )}
                      {branch.behind > 0 && (
                        <span className="text-xs bg-red-600/20 text-red-300 px-2 py-1 rounded-full">
                          ‚Üì{branch.behind}
                        </span>
                      )}
                      <button className="p-1 hover:bg-purple-600/20 rounded text-purple-300">
                        <MoreHorizontal className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  
                  <div className="text-sm text-purple-300">
                    <p className="truncate">{branch.lastCommit}</p>
                    <div className="flex items-center gap-4 mt-1 text-xs">
                      <span>{branch.author}</span>
                      <span>{branch.date}</span>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'stash' && (
          <div className="p-4 h-full overflow-y-auto">
            <div className="mb-4">
              <button className="w-full px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white rounded-lg font-medium transition-all flex items-center justify-center gap-2">
                <Archive className="h-4 w-4" />
                Stash Changes
              </button>
            </div>
            
            <div className="space-y-2">
              {stashes.map((stash, index) => (
                <motion.div
                  key={stash.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="bg-purple-900/20 backdrop-blur-sm border border-purple-500/20 rounded-lg p-4 hover:bg-purple-900/30 transition-colors"
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <Archive className="h-4 w-4 text-purple-400" />
                      <span className="font-medium text-white">{stash.id}</span>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <button className="px-2 py-1 bg-green-600/30 hover:bg-green-600/50 text-green-100 rounded text-xs transition-colors">
                        Apply
                      </button>
                      <button className="px-2 py-1 bg-red-600/30 hover:bg-red-600/50 text-red-100 rounded text-xs transition-colors">
                        Drop
                      </button>
                    </div>
                  </div>
                  
                  <p className="text-sm text-purple-200 mb-2">{stash.message}</p>
                  
                  <div className="flex items-center gap-4 text-xs text-purple-300">
                    <span>Branch: {stash.branch}</span>
                    <span>{stash.date}</span>
                    <span>{stash.files} files</span>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'remotes' && (
          <div className="p-4 h-full overflow-y-auto">
            <div className="mb-4">
              <button className="w-full px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white rounded-lg font-medium transition-all flex items-center justify-center gap-2">
                <Plus className="h-4 w-4" />
                Add Remote
              </button>
            </div>
            
            <div className="space-y-2">
              {remotes.map((remote, index) => (
                <motion.div
                  key={`${remote.name}-${remote.type}`}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="bg-purple-900/20 backdrop-blur-sm border border-purple-500/20 rounded-lg p-4 hover:bg-purple-900/30 transition-colors"
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <Globe className="h-4 w-4 text-purple-400" />
                      <span className="font-medium text-white">{remote.name}</span>
                      <span className={`text-xs px-2 py-1 rounded-full ${
                        remote.type === 'fetch' ? 'bg-blue-600/20 text-blue-300' : 'bg-green-600/20 text-green-300'
                      }`}>
                        {remote.type}
                      </span>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <button className="p-1 hover:bg-purple-600/20 rounded text-purple-300">
                        <Copy className="h-4 w-4" />
                      </button>
                      <button className="p-1 hover:bg-red-600/20 rounded text-red-400">
                        <Trash2 className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  
                  <p className="text-sm text-purple-300 font-mono break-all">{remote.url}</p>
                </motion.div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Repository Status Bar */}
      <div className="bg-purple-900/30 backdrop-blur-sm border-t border-purple-500/20 p-3">
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-1">
              <Activity className="h-4 w-4 text-green-400" />
              <span className="text-purple-200">Repository Status: Clean</span>
            </div>
            <div className="flex items-center gap-1">
              <GitBranch className="h-4 w-4 text-purple-400" />
              <span className="text-purple-200">{branches.find(b => b.current)?.name || 'main'}</span>
            </div>
          </div>
          
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-1">
              <CheckCircle className="h-4 w-4 text-green-400" />
              <span className="text-purple-200">Up to date</span>
            </div>
            <div className="flex items-center gap-1">
              <Users className="h-4 w-4 text-blue-400" />
              <span className="text-purple-200">3 contributors</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
