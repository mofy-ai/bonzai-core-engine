"use client";

import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  GitBranch, 
  GitCommit, 
  GitMerge, 
  Plus, 
  Trash2, 
  Download, 
  Upload, 
  RefreshCw, 
  Clock, 
  User, 
  FileText, 
  Check, 
  X, 
  AlertCircle, 
  Star, 
  Eye, 
  ChevronDown, 
  ChevronRight,
  Smile,
  Heart,
  Zap,
  Coffee,
  Rocket,
  Target
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

interface GitFile {
  id: string;
  name: string;
  path: string;
  status: 'added' | 'modified' | 'deleted' | 'untracked' | 'staged';
  changes: number;
  additions: number;
  deletions: number;
}

interface GitCommit {
  id: string;
  hash: string;
  message: string;
  author: string;
  date: string;
  avatar: string;
  branch: string;
  files: number;
  additions: number;
  deletions: number;
}

interface GitBranch {
  name: string;
  current: boolean;
  ahead: number;
  behind: number;
  lastCommit: string;
}

interface GitStash {
  id: string;
  message: string;
  branch: string;
  date: string;
  files: number;
}

interface GitConflict {
  file: string;
  conflicts: number;
  resolved: boolean;
}

const GitIntegrationPanel = () => {
  const [activeTab, setActiveTab] = useState('source-control');
  const [selectedFiles, setSelectedFiles] = useState<string[]>([]);
  const [commitMessage, setCommitMessage] = useState('');
  const [currentBranch, setCurrentBranch] = useState('main');
  const [isLoading, setIsLoading] = useState(false);
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    changes: true,
    staged: true,
    history: true,
    branches: true
  });

  const dragRef = useRef<HTMLDivElement>(null);

  // Mock data
  const files: GitFile[] = [
    { id: '1', name: 'App.tsx', path: 'src/App.tsx', status: 'modified', changes: 15, additions: 10, deletions: 5 },
    { id: '2', name: 'utils.ts', path: 'src/utils.ts', status: 'added', changes: 25, additions: 25, deletions: 0 },
    { id: '3', name: 'styles.css', path: 'src/styles.css', status: 'deleted', changes: 8, additions: 0, deletions: 8 },
    { id: '4', name: 'config.json', path: 'config.json', status: 'untracked', changes: 12, additions: 12, deletions: 0 },
    { id: '5', name: 'README.md', path: 'README.md', status: 'staged', changes: 3, additions: 2, deletions: 1 }
  ];

  const commits: GitCommit[] = [
    {
      id: '1',
      hash: 'a1b2c3d',
      message: 'feat: Add new authentication system',
      author: 'Alice Johnson',
      date: '2 hours ago',
      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Alice',
      branch: 'main',
      files: 5,
      additions: 120,
      deletions: 45
    },
    {
      id: '2',
      hash: 'e4f5g6h',
      message: 'fix: Resolve memory leak in data processing',
      author: 'Bob Smith',
      date: '5 hours ago',
      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Bob',
      branch: 'main',
      files: 3,
      additions: 25,
      deletions: 18
    },
    {
      id: '3',
      hash: 'i7j8k9l',
      message: 'style: Update UI components with new design system',
      author: 'Carol Davis',
      date: '1 day ago',
      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Carol',
      branch: 'feature/ui-update',
      files: 12,
      additions: 200,
      deletions: 85
    }
  ];

  const branches: GitBranch[] = [
    { name: 'main', current: true, ahead: 0, behind: 0, lastCommit: '2 hours ago' },
    { name: 'feature/auth', current: false, ahead: 3, behind: 1, lastCommit: '1 day ago' },
    { name: 'bugfix/memory-leak', current: false, ahead: 1, behind: 2, lastCommit: '3 days ago' }
  ];

  const stashes: GitStash[] = [
    { id: '1', message: 'WIP: Working on new feature', branch: 'main', date: '1 hour ago', files: 3 },
    { id: '2', message: 'Temporary changes for testing', branch: 'feature/auth', date: '2 days ago', files: 5 }
  ];

  const conflicts: GitConflict[] = [
    { file: 'src/App.tsx', conflicts: 2, resolved: false },
    { file: 'src/utils.ts', conflicts: 1, resolved: true }
  ];

  const emojis = ['🎉', '✨', '🚀', '🔥', '💡', '🎯', '⚡', '🌟'];

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'added': return 'text-green-400';
      case 'modified': return 'text-yellow-400';
      case 'deleted': return 'text-red-400';
      case 'untracked': return 'text-blue-400';
      case 'staged': return 'text-purple-400';
      default: return 'text-gray-400';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'added': return <Plus className="w-3 h-3" />;
      case 'modified': return <FileText className="w-3 h-3" />;
      case 'deleted': return <Trash2 className="w-3 h-3" />;
      case 'untracked': return <AlertCircle className="w-3 h-3" />;
      case 'staged': return <Check className="w-3 h-3" />;
      default: return <FileText className="w-3 h-3" />;
    }
  };

  const handleFileSelect = (fileId: string) => {
    setSelectedFiles(prev => 
      prev.includes(fileId) 
        ? prev.filter(id => id !== fileId)
        : [...prev, fileId]
    );
  };

  const handleStageFiles = () => {
    setIsLoading(true);
    setTimeout(() => {
      setSelectedFiles([]);
      setIsLoading(false);
    }, 1000);
  };

  const handleCommit = () => {
    if (!commitMessage.trim()) return;
    setIsLoading(true);
    setTimeout(() => {
      setCommitMessage('');
      setIsLoading(false);
    }, 1500);
  };

  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const addEmoji = (emoji: string) => {
    setCommitMessage(prev => prev + emoji);
  };

  return (
    <div className="h-screen bg-gradient-to-br from-purple-900/20 via-black to-indigo-900/20 backdrop-blur-xl border-r border-purple-500/20 text-white overflow-hidden">
      {/* Header */}
      <div className="p-4 border-b border-purple-500/20 bg-black/20 backdrop-blur-sm">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <GitBranch className="w-5 h-5 text-purple-400" />
            <h2 className="text-lg font-semibold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
              Git Integration
            </h2>
          </div>
          <div className="flex items-center gap-2">
            <Badge variant="outline" className="border-green-500/30 text-green-400">
              {currentBranch}
            </Badge>
            <Button size="sm" variant="ghost" className="text-purple-400 hover:bg-purple-500/20">
              <RefreshCw className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Repository Status */}
      <div className="p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 border-b border-purple-500/20">
        <div className="grid grid-cols-3 gap-4 text-center">
          <div>
            <div className="text-2xl font-bold text-green-400">12</div>
            <div className="text-xs text-gray-400">Ahead</div>
          </div>
          <div>
            <div className="text-2xl font-bold text-yellow-400">3</div>
            <div className="text-xs text-gray-400">Behind</div>
          </div>
          <div>
            <div className="text-2xl font-bold text-red-400">2</div>
            <div className="text-xs text-gray-400">Conflicts</div>
          </div>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
        <TabsList className="grid w-full grid-cols-4 bg-black/20 border-b border-purple-500/20">
          <TabsTrigger value="source-control" className="text-xs">Source</TabsTrigger>
          <TabsTrigger value="history" className="text-xs">History</TabsTrigger>
          <TabsTrigger value="branches" className="text-xs">Branches</TabsTrigger>
          <TabsTrigger value="stash" className="text-xs">Stash</TabsTrigger>
        </TabsList>

        <div className="flex-1 overflow-hidden">
          <TabsContent value="source-control" className="h-full m-0">
            <ScrollArea className="h-full">
              <div className="p-4 space-y-4">
                {/* Mama Bear Encouragement */}
                <motion.div 
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-gradient-to-r from-pink-500/20 to-purple-500/20 rounded-lg p-3 border border-pink-500/30"
                >
                  <div className="flex items-center gap-2 mb-2">
                    <Heart className="w-4 h-4 text-pink-400" />
                    <span className="text-sm font-medium text-pink-400">Mama Bear Says</span>
                  </div>
                  <p className="text-xs text-gray-300">
                    "Great work! Remember to write clear commit messages. Your future self will thank you! 🐻💕"
                  </p>
                </motion.div>

                {/* Changes Section */}
                <div className="space-y-2">
                  <button
                    onClick={() => toggleSection('changes')}
                    className="flex items-center gap-2 w-full text-left hover:bg-purple-500/10 rounded p-2 transition-colors"
                  >
                    {expandedSections.changes ? 
                      <ChevronDown className="w-4 h-4 text-purple-400" /> : 
                      <ChevronRight className="w-4 h-4 text-purple-400" />
                    }
                    <span className="font-medium text-purple-400">Changes ({files.filter(f => f.status !== 'staged').length})</span>
                  </button>

                  <AnimatePresence>
                    {expandedSections.changes && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        className="space-y-1"
                      >
                        {files.filter(f => f.status !== 'staged').map((file) => (
                          <motion.div
                            key={file.id}
                            whileHover={{ scale: 1.02, backgroundColor: 'rgba(147, 51, 234, 0.1)' }}
                            className="flex items-center gap-3 p-2 rounded cursor-pointer transition-all"
                            onClick={() => handleFileSelect(file.id)}
                          >
                            <input
                              type="checkbox"
                              checked={selectedFiles.includes(file.id)}
                              onChange={() => handleFileSelect(file.id)}
                              className="rounded border-purple-500/30"
                            />
                            <div className={`${getStatusColor(file.status)}`}>
                              {getStatusIcon(file.status)}
                            </div>
                            <div className="flex-1 min-w-0">
                              <div className="text-sm font-medium truncate">{file.name}</div>
                              <div className="text-xs text-gray-400 truncate">{file.path}</div>
                            </div>
                            <div className="text-xs text-gray-400">
                              +{file.additions} -{file.deletions}
                            </div>
                          </motion.div>
                        ))}
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>

                {/* Stage Button */}
                {selectedFiles.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                  >
                    <Button
                      onClick={handleStageFiles}
                      disabled={isLoading}
                      className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
                    >
                      {isLoading ? (
                        <RefreshCw className="w-4 h-4 animate-spin mr-2" />
                      ) : (
                        <Plus className="w-4 h-4 mr-2" />
                      )}
                      Stage {selectedFiles.length} file(s)
                    </Button>
                  </motion.div>
                )}

                {/* Staged Changes */}
                <div className="space-y-2">
                  <button
                    onClick={() => toggleSection('staged')}
                    className="flex items-center gap-2 w-full text-left hover:bg-purple-500/10 rounded p-2 transition-colors"
                  >
                    {expandedSections.staged ? 
                      <ChevronDown className="w-4 h-4 text-green-400" /> : 
                      <ChevronRight className="w-4 h-4 text-green-400" />
                    }
                    <span className="font-medium text-green-400">Staged Changes ({files.filter(f => f.status === 'staged').length})</span>
                  </button>

                  <AnimatePresence>
                    {expandedSections.staged && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        className="space-y-1"
                      >
                        {files.filter(f => f.status === 'staged').map((file) => (
                          <div key={file.id} className="flex items-center gap-3 p-2 rounded bg-green-500/10">
                            <Check className="w-3 h-3 text-green-400" />
                            <div className="flex-1 min-w-0">
                              <div className="text-sm font-medium truncate">{file.name}</div>
                              <div className="text-xs text-gray-400 truncate">{file.path}</div>
                            </div>
                            <div className="text-xs text-gray-400">
                              +{file.additions} -{file.deletions}
                            </div>
                          </div>
                        ))}
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>

                {/* Commit Section */}
                <div className="space-y-3 bg-black/20 rounded-lg p-4 border border-purple-500/20">
                  <div className="flex items-center gap-2">
                    <GitCommit className="w-4 h-4 text-purple-400" />
                    <span className="font-medium text-purple-400">Commit Changes</span>
                  </div>

                  {/* Emoji Picker */}
                  <div className="flex gap-1 flex-wrap">
                    {emojis.map((emoji) => (
                      <button
                        key={emoji}
                        onClick={() => addEmoji(emoji)}
                        className="p-1 hover:bg-purple-500/20 rounded transition-colors"
                      >
                        {emoji}
                      </button>
                    ))}
                  </div>

                  <Textarea
                    placeholder="Enter commit message... (Mama Bear tip: Be descriptive!)"
                    value={commitMessage}
                    onChange={(e) => setCommitMessage(e.target.value)}
                    className="bg-black/30 border-purple-500/30 text-white placeholder-gray-400 resize-none"
                    rows={3}
                  />

                  <div className="flex items-center justify-between text-xs text-gray-400">
                    <span>{commitMessage.length}/72 characters</span>
                    <span className={commitMessage.length > 50 ? 'text-yellow-400' : ''}>
                      {commitMessage.length > 50 ? 'Consider shorter message' : 'Good length!'}
                    </span>
                  </div>

                  <Button
                    onClick={handleCommit}
                    disabled={!commitMessage.trim() || isLoading}
                    className="w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600"
                  >
                    {isLoading ? (
                      <RefreshCw className="w-4 h-4 animate-spin mr-2" />
                    ) : (
                      <GitCommit className="w-4 h-4 mr-2" />
                    )}
                    Commit Changes
                  </Button>
                </div>
              </div>
            </ScrollArea>
          </TabsContent>

          <TabsContent value="history" className="h-full m-0">
            <ScrollArea className="h-full">
              <div className="p-4 space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="font-medium text-purple-400">Commit History</h3>
                  <Button size="sm" variant="ghost" className="text-purple-400">
                    <Eye className="w-4 h-4" />
                  </Button>
                </div>

                <div className="space-y-3">
                  {commits.map((commit, index) => (
                    <motion.div
                      key={commit.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className="bg-black/20 rounded-lg p-4 border border-purple-500/20 hover:border-purple-500/40 transition-colors"
                    >
                      <div className="flex items-start gap-3">
                        <img
                          src={commit.avatar}
                          alt={commit.author}
                          className="w-8 h-8 rounded-full border border-purple-500/30"
                        />
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            <span className="text-sm font-medium truncate">{commit.message}</span>
                            <Badge variant="outline" className="text-xs border-purple-500/30 text-purple-400">
                              {commit.hash}
                            </Badge>
                          </div>
                          <div className="flex items-center gap-4 text-xs text-gray-400">
                            <span>{commit.author}</span>
                            <span>{commit.date}</span>
                            <span>{commit.files} files</span>
                            <span className="text-green-400">+{commit.additions}</span>
                            <span className="text-red-400">-{commit.deletions}</span>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </ScrollArea>
          </TabsContent>

          <TabsContent value="branches" className="h-full m-0">
            <ScrollArea className="h-full">
              <div className="p-4 space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="font-medium text-purple-400">Branches</h3>
                  <Button size="sm" variant="ghost" className="text-purple-400">
                    <Plus className="w-4 h-4" />
                  </Button>
                </div>

                <div className="space-y-2">
                  {branches.map((branch) => (
                    <motion.div
                      key={branch.name}
                      whileHover={{ scale: 1.02 }}
                      className={`p-3 rounded-lg border transition-all cursor-pointer ${
                        branch.current 
                          ? 'bg-purple-500/20 border-purple-500/40' 
                          : 'bg-black/20 border-purple-500/20 hover:border-purple-500/40'
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <GitBranch className={`w-4 h-4 ${branch.current ? 'text-purple-400' : 'text-gray-400'}`} />
                          <span className={`font-medium ${branch.current ? 'text-purple-400' : 'text-white'}`}>
                            {branch.name}
                          </span>
                          {branch.current && (
                            <Badge variant="outline" className="text-xs border-green-500/30 text-green-400">
                              current
                            </Badge>
                          )}
                        </div>
                        <div className="flex items-center gap-2 text-xs text-gray-400">
                          {branch.ahead > 0 && <span className="text-green-400">↑{branch.ahead}</span>}
                          {branch.behind > 0 && <span className="text-red-400">↓{branch.behind}</span>}
                        </div>
                      </div>
                      <div className="text-xs text-gray-400 mt-1">
                        Last commit: {branch.lastCommit}
                      </div>
                    </motion.div>
                  ))}
                </div>

                {/* Remote Actions */}
                <div className="grid grid-cols-2 gap-2 pt-4 border-t border-purple-500/20">
                  <Button variant="outline" size="sm" className="border-purple-500/30 text-purple-400">
                    <Download className="w-4 h-4 mr-2" />
                    Pull
                  </Button>
                  <Button variant="outline" size="sm" className="border-purple-500/30 text-purple-400">
                    <Upload className="w-4 h-4 mr-2" />
                    Push
                  </Button>
                </div>
              </div>
            </ScrollArea>
          </TabsContent>

          <TabsContent value="stash" className="h-full m-0">
            <ScrollArea className="h-full">
              <div className="p-4 space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="font-medium text-purple-400">Stash</h3>
                  <Button size="sm" variant="ghost" className="text-purple-400">
                    <Plus className="w-4 h-4" />
                  </Button>
                </div>

                <div className="space-y-2">
                  {stashes.map((stash) => (
                    <motion.div
                      key={stash.id}
                      whileHover={{ scale: 1.02 }}
                      className="bg-black/20 rounded-lg p-3 border border-purple-500/20 hover:border-purple-500/40 transition-colors"
                    >
                      <div className="flex items-center justify-between mb-2">
                        <span className="font-medium text-white truncate">{stash.message}</span>
                        <div className="flex gap-1">
                          <Button size="sm" variant="ghost" className="text-green-400 p-1">
                            <Download className="w-3 h-3" />
                          </Button>
                          <Button size="sm" variant="ghost" className="text-red-400 p-1">
                            <Trash2 className="w-3 h-3" />
                          </Button>
                        </div>
                      </div>
                      <div className="flex items-center gap-4 text-xs text-gray-400">
                        <span>{stash.branch}</span>
                        <span>{stash.date}</span>
                        <span>{stash.files} files</span>
                      </div>
                    </motion.div>
                  ))}
                </div>

                {/* Conflict Resolution */}
                {conflicts.length > 0 && (
                  <div className="pt-4 border-t border-purple-500/20">
                    <h4 className="font-medium text-red-400 mb-2">Merge Conflicts</h4>
                    <div className="space-y-2">
                      {conflicts.map((conflict) => (
                        <div
                          key={conflict.file}
                          className={`p-3 rounded-lg border ${
                            conflict.resolved 
                              ? 'bg-green-500/10 border-green-500/30' 
                              : 'bg-red-500/10 border-red-500/30'
                          }`}
                        >
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-medium">{conflict.file}</span>
                            {conflict.resolved ? (
                              <Check className="w-4 h-4 text-green-400" />
                            ) : (
                              <AlertCircle className="w-4 h-4 text-red-400" />
                            )}
                          </div>
                          <div className="text-xs text-gray-400 mt-1">
                            {conflict.conflicts} conflict(s) {conflict.resolved ? 'resolved' : 'remaining'}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>
          </TabsContent>
        </div>
      </Tabs>
    </div>
  );
};

export default function GitIntegrationDemo() {
  return (
    <div className="h-screen bg-black flex">
      <div className="w-96">
        <GitIntegrationPanel />
      </div>
      <div className="flex-1 bg-gradient-to-br from-purple-900/10 via-black to-indigo-900/10 flex items-center justify-center">
        <div className="text-center text-white">
          <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
            Monaco IDE
          </h1>
          <p className="text-gray-400">Git Integration Panel Demo</p>
        </div>
      </div>
    </div>
  );
}
