"use client";

import * as React from "react";
import { useState, useEffect, useCallback, useMemo, createContext, useContext } from "react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { 
  FolderIcon, 
  FolderOpenIcon, 
  FileIcon, 
  Search, 
  Plus, 
  X, 
  MoreHorizontal,
  Terminal,
  GitBranch,
  AlertCircle,
  CheckCircle,
  Info,
  Zap,
  Settings,
  Bell,
  Wifi,
  WifiOff,
  ChevronDown,
  Play,
  Square,
  Trash2,
  Copy,
  Edit,
  Download,
  Upload,
  RefreshCw,
  Code,
  FileText,
  Database,
  Image,
  Music,
  Video,
  Archive,
  Hash,
  Monitor,
  Smartphone,
  Tablet,
  Palette,
  Type,
  RotateCcw,
  Save,
  Filter,
  SortAsc,
  Eye,
  EyeOff,
  Maximize2,
  Minimize2,
  Split,
  Command,
  ArrowUp,
  ArrowDown,
  ArrowLeft,
  ArrowRight
} from "lucide-react";
import { AnimatePresence, motion } from "framer-motion";

// Types and Interfaces
interface FileNode {
  id: string;
  name: string;
  type: 'file' | 'folder';
  path: string;
  children?: FileNode[];
  size?: number;
  modified?: Date;
  status?: 'modified' | 'new' | 'deleted' | 'staged';
  extension?: string;
}

interface OpenFile {
  id: string;
  name: string;
  path: string;
  content: string;
  language: string;
  modified: boolean;
  pinned?: boolean;
}

interface Terminal {
  id: string;
  name: string;
  type: 'bash' | 'powershell' | 'cmd' | 'git-bash';
  active: boolean;
}

interface Problem {
  id: string;
  file: string;
  line: number;
  column: number;
  severity: 'error' | 'warning' | 'info';
  message: string;
  code?: string;
}

interface Command {
  id: string;
  label: string;
  category: string;
  shortcut?: string;
  icon: React.ComponentType<{ className?: string }>;
  action: () => void;
}

interface Setting {
  key: string;
  label: string;
  type: 'text' | 'number' | 'boolean' | 'select' | 'color';
  value: any;
  options?: { label: string; value: any }[];
  category: string;
}

// Sample Data
const sampleFiles: FileNode[] = [
  {
    id: '1',
    name: 'src',
    type: 'folder',
    path: '/src',
    children: [
      {
        id: '2',
        name: 'components',
        type: 'folder',
        path: '/src/components',
        children: [
          { id: '3', name: 'Button.tsx', type: 'file', path: '/src/components/Button.tsx', extension: 'tsx', status: 'modified' },
          { id: '4', name: 'Input.tsx', type: 'file', path: '/src/components/Input.tsx', extension: 'tsx' },
          { id: '5', name: 'Modal.tsx', type: 'file', path: '/src/components/Modal.tsx', extension: 'tsx', status: 'new' }
        ]
      },
      {
        id: '6',
        name: 'utils',
        type: 'folder',
        path: '/src/utils',
        children: [
          { id: '7', name: 'helpers.ts', type: 'file', path: '/src/utils/helpers.ts', extension: 'ts' },
          { id: '8', name: 'constants.ts', type: 'file', path: '/src/utils/constants.ts', extension: 'ts' }
        ]
      },
      { id: '9', name: 'App.tsx', type: 'file', path: '/src/App.tsx', extension: 'tsx' },
      { id: '10', name: 'index.tsx', type: 'file', path: '/src/index.tsx', extension: 'tsx' }
    ]
  },
  {
    id: '11',
    name: 'public',
    type: 'folder',
    path: '/public',
    children: [
      { id: '12', name: 'index.html', type: 'file', path: '/public/index.html', extension: 'html' },
      { id: '13', name: 'favicon.ico', type: 'file', path: '/public/favicon.ico', extension: 'ico' }
    ]
  },
  { id: '14', name: 'package.json', type: 'file', path: '/package.json', extension: 'json' },
  { id: '15', name: 'README.md', type: 'file', path: '/README.md', extension: 'md' }
];

const sampleOpenFiles: OpenFile[] = [
  { id: '3', name: 'Button.tsx', path: '/src/components/Button.tsx', content: '', language: 'typescript', modified: true },
  { id: '9', name: 'App.tsx', path: '/src/App.tsx', content: '', language: 'typescript', modified: false, pinned: true },
  { id: '14', name: 'package.json', path: '/package.json', content: '', language: 'json', modified: false }
];

const sampleTerminals: Terminal[] = [
  { id: '1', name: 'Terminal 1', type: 'bash', active: true },
  { id: '2', name: 'Terminal 2', type: 'powershell', active: false }
];

const sampleProblems: Problem[] = [
  { id: '1', file: 'Button.tsx', line: 15, column: 8, severity: 'error', message: 'Property "onClick" is missing in type', code: 'TS2741' },
  { id: '2', file: 'App.tsx', line: 23, column: 12, severity: 'warning', message: 'Unused variable "data"', code: 'TS6133' },
  { id: '3', file: 'helpers.ts', line: 5, column: 1, severity: 'info', message: 'Consider using const assertion', code: 'TS2345' }
];

// File Explorer Component
const FileExplorer: React.FC = () => {
  const [files, setFiles] = useState<FileNode[]>(sampleFiles);
  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set(['1', '2']));
  const [selectedFile, setSelectedFile] = useState<string>('');
  const [searchQuery, setSearchQuery] = useState('');

  const getFileIcon = (extension?: string) => {
    switch (extension) {
      case 'tsx':
      case 'ts':
      case 'js':
      case 'jsx':
        return <Code className="h-4 w-4 text-blue-500" />;
      case 'json':
        return <Database className="h-4 w-4 text-yellow-500" />;
      case 'md':
        return <FileText className="h-4 w-4 text-gray-500" />;
      case 'html':
        return <Code className="h-4 w-4 text-orange-500" />;
      case 'css':
        return <Palette className="h-4 w-4 text-purple-500" />;
      case 'png':
      case 'jpg':
      case 'svg':
        return <Image className="h-4 w-4 text-green-500" />;
      default:
        return <FileIcon className="h-4 w-4 text-gray-400" />;
    }
  };

  const getStatusColor = (status?: string) => {
    switch (status) {
      case 'modified':
        return 'text-yellow-500';
      case 'new':
        return 'text-green-500';
      case 'deleted':
        return 'text-red-500';
      case 'staged':
        return 'text-blue-500';
      default:
        return '';
    }
  };

  const toggleFolder = (folderId: string) => {
    setExpandedFolders(prev => {
      const newSet = new Set(prev);
      if (newSet.has(folderId)) {
        newSet.delete(folderId);
      } else {
        newSet.add(folderId);
      }
      return newSet;
    });
  };

  const renderFileNode = (node: FileNode, depth: number = 0) => {
    const isExpanded = expandedFolders.has(node.id);
    const isSelected = selectedFile === node.id;

    return (
      <div key={node.id}>
        <div
          className={cn(
            "flex items-center gap-2 px-2 py-1 text-sm cursor-pointer hover:bg-purple-50 dark:hover:bg-purple-900/20 rounded-md transition-colors",
            isSelected && "bg-purple-100 dark:bg-purple-900/40",
            getStatusColor(node.status)
          )}
          style={{ paddingLeft: `${depth * 16 + 8}px` }}
          onClick={() => {
            if (node.type === 'folder') {
              toggleFolder(node.id);
            } else {
              setSelectedFile(node.id);
            }
          }}
        >
          {node.type === 'folder' ? (
            <>
              {isExpanded ? (
                <FolderOpenIcon className="h-4 w-4 text-purple-500" />
              ) : (
                <FolderIcon className="h-4 w-4 text-purple-500" />
              )}
              <span className="flex-1">{node.name}</span>
            </>
          ) : (
            <>
              {getFileIcon(node.extension)}
              <span className="flex-1">{node.name}</span>
              {node.status && (
                <div className={cn("w-2 h-2 rounded-full", {
                  'bg-yellow-500': node.status === 'modified',
                  'bg-green-500': node.status === 'new',
                  'bg-red-500': node.status === 'deleted',
                  'bg-blue-500': node.status === 'staged'
                })} />
              )}
            </>
          )}
        </div>
        {node.type === 'folder' && isExpanded && node.children && (
          <div>
            {node.children.map(child => renderFileNode(child, depth + 1))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="w-80 h-full bg-background/95 backdrop-blur-sm border-r border-purple-200 dark:border-purple-800 flex flex-col">
      <div className="p-4 border-b border-purple-200 dark:border-purple-800">
        <div className="flex items-center gap-2 mb-3">
          <FolderIcon className="h-5 w-5 text-purple-500" />
          <span className="font-semibold text-purple-900 dark:text-purple-100">Explorer</span>
        </div>
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search files..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-700"
          />
        </div>
        <div className="flex gap-2 mt-3">
          <Button size="sm" variant="ghost" className="text-purple-600 hover:bg-purple-100 dark:hover:bg-purple-900/40">
            <Plus className="h-4 w-4" />
          </Button>
          <Button size="sm" variant="ghost" className="text-purple-600 hover:bg-purple-100 dark:hover:bg-purple-900/40">
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>
      </div>
      <ScrollArea className="flex-1 p-2">
        {files.map(node => renderFileNode(node))}
      </ScrollArea>
    </div>
  );
};

// Editor Tabs Component
const EditorTabs: React.FC = () => {
  const [openFiles, setOpenFiles] = useState<OpenFile[]>(sampleOpenFiles);
  const [activeFile, setActiveFile] = useState<string>('3');

  const closeTab = (fileId: string) => {
    setOpenFiles(prev => prev.filter(f => f.id !== fileId));
    if (activeFile === fileId && openFiles.length > 1) {
      const currentIndex = openFiles.findIndex(f => f.id === fileId);
      const nextFile = openFiles[currentIndex + 1] || openFiles[currentIndex - 1];
      if (nextFile) setActiveFile(nextFile.id);
    }
  };

  return (
    <div className="flex items-center bg-background/95 backdrop-blur-sm border-b border-purple-200 dark:border-purple-800 overflow-x-auto">
      {openFiles.map((file) => (
        <div
          key={file.id}
          className={cn(
            "flex items-center gap-2 px-4 py-2 border-r border-purple-200 dark:border-purple-700 cursor-pointer transition-colors min-w-0",
            activeFile === file.id 
              ? "bg-purple-100 dark:bg-purple-900/40 text-purple-900 dark:text-purple-100" 
              : "hover:bg-purple-50 dark:hover:bg-purple-900/20"
          )}
          onClick={() => setActiveFile(file.id)}
        >
          <Code className="h-4 w-4 text-purple-500 flex-shrink-0" />
          <span className="text-sm truncate">{file.name}</span>
          {file.modified && <div className="w-2 h-2 bg-yellow-500 rounded-full flex-shrink-0" />}
          {file.pinned && <div className="w-2 h-2 bg-blue-500 rounded-full flex-shrink-0" />}
          <Button
            size="sm"
            variant="ghost"
            className="h-4 w-4 p-0 hover:bg-purple-200 dark:hover:bg-purple-800 flex-shrink-0"
            onClick={(e) => {
              e.stopPropagation();
              closeTab(file.id);
            }}
          >
            <X className="h-3 w-3" />
          </Button>
        </div>
      ))}
      <Button
        size="sm"
        variant="ghost"
        className="px-2 text-purple-600 hover:bg-purple-100 dark:hover:bg-purple-900/40"
      >
        <Plus className="h-4 w-4" />
      </Button>
    </div>
  );
};

// Terminal Panel Component
const TerminalPanel: React.FC = () => {
  const [terminals, setTerminals] = useState<Terminal[]>(sampleTerminals);
  const [activeTerminal, setActiveTerminal] = useState<string>('1');
  const [height, setHeight] = useState(300);

  const addTerminal = () => {
    const newTerminal: Terminal = {
      id: Date.now().toString(),
      name: `Terminal ${terminals.length + 1}`,
      type: 'bash',
      active: false
    };
    setTerminals(prev => [...prev, newTerminal]);
    setActiveTerminal(newTerminal.id);
  };

  const closeTerminal = (terminalId: string) => {
    setTerminals(prev => prev.filter(t => t.id !== terminalId));
    if (activeTerminal === terminalId && terminals.length > 1) {
      const remaining = terminals.filter(t => t.id !== terminalId);
      if (remaining.length > 0) setActiveTerminal(remaining[0].id);
    }
  };

  return (
    <div className="bg-background/95 backdrop-blur-sm border-t border-purple-200 dark:border-purple-800" style={{ height }}>
      <div className="flex items-center justify-between px-4 py-2 border-b border-purple-200 dark:border-purple-700">
        <div className="flex items-center gap-2">
          <Terminal className="h-4 w-4 text-purple-500" />
          <span className="font-semibold text-purple-900 dark:text-purple-100">Terminal</span>
        </div>
        <div className="flex items-center gap-2">
          <Button size="sm" variant="ghost" onClick={addTerminal} className="text-purple-600 hover:bg-purple-100 dark:hover:bg-purple-900/40">
            <Plus className="h-4 w-4" />
          </Button>
          <Button size="sm" variant="ghost" className="text-purple-600 hover:bg-purple-100 dark:hover:bg-purple-900/40">
            <Settings className="h-4 w-4" />
          </Button>
        </div>
      </div>
      <div className="flex border-b border-purple-200 dark:border-purple-700">
        {terminals.map((terminal) => (
          <div
            key={terminal.id}
            className={cn(
              "flex items-center gap-2 px-3 py-1 cursor-pointer transition-colors",
              activeTerminal === terminal.id 
                ? "bg-purple-100 dark:bg-purple-900/40" 
                : "hover:bg-purple-50 dark:hover:bg-purple-900/20"
            )}
            onClick={() => setActiveTerminal(terminal.id)}
          >
            <span className="text-sm">{terminal.name}</span>
            <Button
              size="sm"
              variant="ghost"
              className="h-4 w-4 p-0"
              onClick={(e) => {
                e.stopPropagation();
                closeTerminal(terminal.id);
              }}
            >
              <X className="h-3 w-3" />
            </Button>
          </div>
        ))}
      </div>
      <div className="p-4 bg-gray-900 text-green-400 font-mono text-sm h-full overflow-auto">
        <div>$ npm run dev</div>
        <div className="text-gray-500">Starting development server...</div>
        <div className="text-blue-400">Local: http://localhost:3000</div>
        <div className="flex items-center">
          <span>$ </span>
          <div className="w-2 h-4 bg-green-400 ml-1 animate-pulse"></div>
        </div>
      </div>
    </div>
  );
};

// Status Bar Component
const StatusBar: React.FC = () => {
  const [isOnline, setIsOnline] = useState(true);

  return (
    <div className="flex items-center justify-between px-4 py-1 bg-purple-600 text-white text-xs">
      <div className="flex items-center gap-4">
        <div className="flex items-center gap-1">
          <GitBranch className="h-3 w-3" />
          <span>main</span>
        </div>
        <div className="flex items-center gap-1">
          <span>UTF-8</span>
        </div>
        <div className="flex items-center gap-1">
          <span>Ln 23, Col 12</span>
        </div>
        <div className="flex items-center gap-1">
          <span>TypeScript</span>
        </div>
      </div>
      <div className="flex items-center gap-4">
        <div className="flex items-center gap-1">
          <Bell className="h-3 w-3" />
          <span>3</span>
        </div>
        <div className="flex items-center gap-1">
          <Zap className="h-3 w-3" />
          <span>AI Ready</span>
        </div>
        <div className="flex items-center gap-1">
          {isOnline ? <Wifi className="h-3 w-3" /> : <WifiOff className="h-3 w-3" />}
          <span>{isOnline ? 'Online' : 'Offline'}</span>
        </div>
      </div>
    </div>
  );
};

// Problems Panel Component
const ProblemsPanel: React.FC = () => {
  const [problems] = useState<Problem[]>(sampleProblems);
  const [filter, setFilter] = useState<'all' | 'error' | 'warning' | 'info'>('all');

  const filteredProblems = problems.filter(p => filter === 'all' || p.severity === filter);

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'error':
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      case 'warning':
        return <AlertCircle className="h-4 w-4 text-yellow-500" />;
      case 'info':
        return <Info className="h-4 w-4 text-blue-500" />;
      default:
        return <Info className="h-4 w-4 text-gray-500" />;
    }
  };

  const errorCount = problems.filter(p => p.severity === 'error').length;
  const warningCount = problems.filter(p => p.severity === 'warning').length;
  const infoCount = problems.filter(p => p.severity === 'info').length;

  return (
    <div className="h-64 bg-background/95 backdrop-blur-sm border-t border-purple-200 dark:border-purple-800 flex flex-col">
      <div className="flex items-center justify-between px-4 py-2 border-b border-purple-200 dark:border-purple-700">
        <div className="flex items-center gap-2">
          <AlertCircle className="h-4 w-4 text-purple-500" />
          <span className="font-semibold text-purple-900 dark:text-purple-100">Problems</span>
          <Badge variant="outline" className="text-xs">
            {filteredProblems.length}
          </Badge>
        </div>
        <div className="flex items-center gap-2">
          <Button
            size="sm"
            variant={filter === 'all' ? 'default' : 'ghost'}
            onClick={() => setFilter('all')}
            className="text-xs"
          >
            All ({problems.length})
          </Button>
          <Button
            size="sm"
            variant={filter === 'error' ? 'default' : 'ghost'}
            onClick={() => setFilter('error')}
            className="text-xs"
          >
            Errors ({errorCount})
          </Button>
          <Button
            size="sm"
            variant={filter === 'warning' ? 'default' : 'ghost'}
            onClick={() => setFilter('warning')}
            className="text-xs"
          >
            Warnings ({warningCount})
          </Button>
          <Button
            size="sm"
            variant={filter === 'info' ? 'default' : 'ghost'}
            onClick={() => setFilter('info')}
            className="text-xs"
          >
            Info ({infoCount})
          </Button>
        </div>
      </div>
      <ScrollArea className="flex-1">
        <div className="p-2">
          {filteredProblems.map((problem) => (
            <div
              key={problem.id}
              className="flex items-start gap-3 p-2 hover:bg-purple-50 dark:hover:bg-purple-900/20 rounded-md cursor-pointer"
            >
              {getSeverityIcon(problem.severity)}
              <div className="flex-1 min-w-0">
                <div className="text-sm font-medium">{problem.message}</div>
                <div className="text-xs text-gray-500">
                  {problem.file}:{problem.line}:{problem.column}
                  {problem.code && ` [${problem.code}]`}
                </div>
              </div>
            </div>
          ))}
        </div>
      </ScrollArea>
    </div>
  );
};

// Minimap Component
const Minimap: React.FC = () => {
  const [isVisible, setIsVisible] = useState(true);
  const [width, setWidth] = useState(120);

  if (!isVisible) {
    return (
      <Button
        size="sm"
        variant="ghost"
        onClick={() => setIsVisible(true)}
        className="absolute top-4 right-4 z-10"
      >
        <Eye className="h-4 w-4" />
      </Button>
    );
  }

  return (
    <div 
      className="absolute top-0 right-0 bg-background/90 backdrop-blur-sm border-l border-purple-200 dark:border-purple-800 h-full overflow-hidden"
      style={{ width }}
    >
      <div className="flex items-center justify-between p-2 border-b border-purple-200 dark:border-purple-700">
        <span className="text-xs font-medium">Minimap</span>
        <Button
          size="sm"
          variant="ghost"
          onClick={() => setIsVisible(false)}
          className="h-6 w-6 p-0"
        >
          <EyeOff className="h-3 w-3" />
        </Button>
      </div>
      <div className="p-2 text-xs font-mono leading-tight text-gray-400 overflow-hidden">
        <div className="bg-purple-100 dark:bg-purple-900/40 h-8 mb-1 rounded"></div>
        <div className="h-1 bg-gray-200 dark:bg-gray-700 mb-1"></div>
        <div className="h-1 bg-gray-200 dark:bg-gray-700 mb-1"></div>
        <div className="h-1 bg-gray-200 dark:bg-gray-700 mb-1"></div>
        <div className="bg-yellow-100 dark:bg-yellow-900/40 h-2 mb-1 rounded"></div>
        <div className="h-1 bg-gray-200 dark:bg-gray-700 mb-1"></div>
        <div className="h-1 bg-gray-200 dark:bg-gray-700 mb-1"></div>
        <div className="bg-red-100 dark:bg-red-900/40 h-2 mb-1 rounded"></div>
      </div>
    </div>
  );
};

// Command Palette Component
const CommandPalette: React.FC<{ isOpen: boolean; onClose: () => void }> = ({ isOpen, onClose }) => {
  const [searchQuery, setSearchQuery] = useState('');

  const commands: Command[] = [
    { id: '1', label: 'New File', category: 'File', shortcut: '⌘N', icon: FileIcon, action: () => {} },
    { id: '2', label: 'Open File', category: 'File', shortcut: '⌘O', icon: FolderIcon, action: () => {} },
    { id: '3', label: 'Save File', category: 'File', shortcut: '⌘S', icon: Save, action: () => {} },
    { id: '4', label: 'Find in Files', category: 'Search', shortcut: '⌘⇧F', icon: Search, action: () => {} },
    { id: '5', label: 'Toggle Terminal', category: 'View', shortcut: '⌘`', icon: Terminal, action: () => {} },
    { id: '6', label: 'Command Palette', category: 'View', shortcut: '⌘⇧P', icon: Command, action: () => {} }
  ];

  const filteredCommands = commands.filter(cmd => 
    cmd.label.toLowerCase().includes(searchQuery.toLowerCase()) ||
    cmd.category.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const groupedCommands = filteredCommands.reduce((acc, cmd) => {
    if (!acc[cmd.category]) acc[cmd.category] = [];
    acc[cmd.category].push(cmd);
    return acc;
  }, {} as Record<string, Command[]>);

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    if (isOpen) {
      document.addEventListener('keydown', handleKeyDown);
      return () => document.removeEventListener('keydown', handleKeyDown);
    }
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-start justify-center pt-20">
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
        className="w-full max-w-2xl bg-background border border-purple-200 dark:border-purple-800 rounded-lg shadow-xl overflow-hidden"
      >
        <div className="p-4 border-b border-purple-200 dark:border-purple-700">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Type a command or search..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
              autoFocus
            />
          </div>
        </div>
        <ScrollArea className="max-h-96">
          <div className="p-2">
            {Object.entries(groupedCommands).map(([category, cmds]) => (
              <div key={category} className="mb-4">
                <div className="px-2 py-1 text-xs font-semibold text-gray-500 uppercase tracking-wide">
                  {category}
                </div>
                {cmds.map((cmd) => (
                  <div
                    key={cmd.id}
                    className="flex items-center justify-between p-2 hover:bg-purple-50 dark:hover:bg-purple-900/20 rounded-md cursor-pointer"
                    onClick={() => {
                      cmd.action();
                      onClose();
                    }}
                  >
                    <div className="flex items-center gap-3">
                      <cmd.icon className="h-4 w-4 text-purple-500" />
                      <span>{cmd.label}</span>
                    </div>
                    {cmd.shortcut && (
                      <Badge variant="outline" className="text-xs">
                        {cmd.shortcut}
                      </Badge>
                    )}
                  </div>
                ))}
              </div>
            ))}
          </div>
        </ScrollArea>
      </motion.div>
    </div>
  );
};

// Settings Panel Component
const SettingsPanel: React.FC<{ isOpen: boolean; onClose: () => void }> = ({ isOpen, onClose }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [activeCategory, setActiveCategory] = useState('Editor');

  const settings: Setting[] = [
    { key: 'fontSize', label: 'Font Size', type: 'number', value: 14, category: 'Editor' },
    { key: 'theme', label: 'Theme', type: 'select', value: 'dark', options: [{ label: 'Dark', value: 'dark' }, { label: 'Light', value: 'light' }], category: 'Editor' },
    { key: 'wordWrap', label: 'Word Wrap', type: 'boolean', value: true, category: 'Editor' },
    { key: 'tabSize', label: 'Tab Size', type: 'number', value: 2, category: 'Editor' },
    { key: 'shell', label: 'Default Shell', type: 'select', value: 'bash', options: [{ label: 'Bash', value: 'bash' }, { label: 'PowerShell', value: 'powershell' }], category: 'Terminal' },
    { key: 'terminalFont', label: 'Terminal Font Size', type: 'number', value: 12, category: 'Terminal' },
    { key: 'aiModel', label: 'AI Model', type: 'select', value: 'gpt-4', options: [{ label: 'GPT-4', value: 'gpt-4' }, { label: 'GPT-3.5', value: 'gpt-3.5' }], category: 'AI' },
    { key: 'gitUser', label: 'Git Username', type: 'text', value: 'john.doe', category: 'Git' }
  ];

  const categories = [...new Set(settings.map(s => s.category))];
  const filteredSettings = settings.filter(s => 
    s.label.toLowerCase().includes(searchQuery.toLowerCase()) &&
    s.category === activeCategory
  );

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center">
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
        className="w-full max-w-4xl h-3/4 bg-background border border-purple-200 dark:border-purple-800 rounded-lg shadow-xl overflow-hidden flex"
      >
        <div className="w-64 border-r border-purple-200 dark:border-purple-700 p-4">
          <div className="flex items-center justify-between mb-4">
            <h2 className="font-semibold">Settings</h2>
            <Button size="sm" variant="ghost" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </div>
          <div className="space-y-1">
            {categories.map((category) => (
              <Button
                key={category}
                variant={activeCategory === category ? 'default' : 'ghost'}
                className="w-full justify-start"
                onClick={() => setActiveCategory(category)}
              >
                {category}
              </Button>
            ))}
          </div>
        </div>
        <div className="flex-1 p-4">
          <div className="mb-4">
            <Input
              placeholder="Search settings..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <ScrollArea className="h-full">
            <div className="space-y-4">
              {filteredSettings.map((setting) => (
                <div key={setting.key} className="flex items-center justify-between p-3 border border-purple-200 dark:border-purple-700 rounded-md">
                  <div>
                    <div className="font-medium">{setting.label}</div>
                    <div className="text-sm text-gray-500">{setting.key}</div>
                  </div>
                  <div className="w-48">
                    {setting.type === 'boolean' ? (
                      <Button variant="outline" size="sm">
                        {setting.value ? 'Enabled' : 'Disabled'}
                      </Button>
                    ) : setting.type === 'select' ? (
                      <select className="w-full p-2 border border-purple-200 dark:border-purple-700 rounded-md bg-background">
                        {setting.options?.map((option) => (
                          <option key={option.value} value={option.value}>
                            {option.label}
                          </option>
                        ))}
                      </select>
                    ) : (
                      <Input
                        type={setting.type}
                        value={setting.value}
                        className="w-full"
                      />
                    )}
                  </div>
                </div>
              ))}
            </div>
          </ScrollArea>
        </div>
      </motion.div>
    </div>
  );
};

// Main Monaco IDE Component
const MonacoIDE: React.FC = () => {
  const [commandPaletteOpen, setCommandPaletteOpen] = useState(false);
  const [settingsOpen, setSettingsOpen] = useState(false);
  const [activePanel, setActivePanel] = useState<'problems' | 'terminal' | 'output'>('terminal');

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if ((e.metaKey || e.ctrlKey) && e.shiftKey && e.key === 'P') {
        e.preventDefault();
        setCommandPaletteOpen(true);
      }
      if ((e.metaKey || e.ctrlKey) && e.key === ',') {
        e.preventDefault();
        setSettingsOpen(true);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, []);

  return (
    <div className="h-screen w-screen bg-gradient-to-br from-purple-50 via-white to-purple-100 dark:from-purple-950 dark:via-gray-900 dark:to-purple-900 flex flex-col overflow-hidden">
      {/* Editor Tabs */}
      <EditorTabs />
      
      {/* Main Content Area */}
      <div className="flex-1 flex overflow-hidden">
        {/* File Explorer */}
        <FileExplorer />
        
        {/* Editor Area */}
        <div className="flex-1 relative bg-background/50 backdrop-blur-sm">
          <div className="h-full p-8 font-mono text-sm">
            <div className="text-purple-600 mb-4">// Monaco IDE - Purple Glassmorphism Theme</div>
            <div className="text-gray-700 dark:text-gray-300">
              <div>import React from 'react';</div>
              <div>import &#123; useState &#125; from 'react';</div>
              <div className="mt-4">const Component = () =&gt; &#123;</div>
              <div className="ml-4 text-yellow-600">const [state, setState] = useState(false);</div>
              <div className="ml-4 mt-2 text-blue-600">return (</div>
              <div className="ml-8 text-green-600">&lt;div className="purple-theme"&gt;</div>
              <div className="ml-12">Hello Monaco IDE!</div>
              <div className="ml-8 text-green-600">&lt;/div&gt;</div>
              <div className="ml-4 text-blue-600">);</div>
              <div>&#125;;</div>
            </div>
          </div>
          
          {/* Minimap */}
          <Minimap />
        </div>
      </div>
      
      {/* Bottom Panel */}
      <div className="border-t border-purple-200 dark:border-purple-800">
        <Tabs value={activePanel} onValueChange={(value) => setActivePanel(value as any)}>
          <TabsList className="bg-transparent border-b border-purple-200 dark:border-purple-700 rounded-none">
            <TabsTrigger value="problems" className="data-[state=active]:bg-purple-100 dark:data-[state=active]:bg-purple-900/40">
              Problems
            </TabsTrigger>
            <TabsTrigger value="terminal" className="data-[state=active]:bg-purple-100 dark:data-[state=active]:bg-purple-900/40">
              Terminal
            </TabsTrigger>
            <TabsTrigger value="output" className="data-[state=active]:bg-purple-100 dark:data-[state=active]:bg-purple-900/40">
              Output
            </TabsTrigger>
          </TabsList>
          <TabsContent value="problems" className="m-0">
            <ProblemsPanel />
          </TabsContent>
          <TabsContent value="terminal" className="m-0">
            <TerminalPanel />
          </TabsContent>
          <TabsContent value="output" className="m-0">
            <div className="h-64 p-4 bg-background/95 backdrop-blur-sm">
              <div className="text-sm text-gray-600 dark:text-gray-400">Output panel content...</div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
      
      {/* Status Bar */}
      <StatusBar />
      
      {/* Command Palette */}
      <AnimatePresence>
        {commandPaletteOpen && (
          <CommandPalette 
            isOpen={commandPaletteOpen} 
            onClose={() => setCommandPaletteOpen(false)} 
          />
        )}
      </AnimatePresence>
      
      {/* Settings Panel */}
      <AnimatePresence>
        {settingsOpen && (
          <SettingsPanel 
            isOpen={settingsOpen} 
            onClose={() => setSettingsOpen(false)} 
          />
        )}
      </AnimatePresence>
    </div>
  );
};

export default MonacoIDE;
