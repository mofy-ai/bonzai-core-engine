"use client";

import * as React from "react";
import { useState, useEffect, useCallback, useMemo, createContext, useContext } from "react";
import { cn } from "@/lib/utils";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Textarea } from "@/components/ui/textarea";
import {
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from "@/components/ui/command";
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import {
  Search,
  FolderIcon,
  FolderOpenIcon,
  FileIcon,
  FileText,
  FileCode,
  Plus,
  X,
  MoreHorizontal,
  ChevronDown,
  Terminal,
  Settings,
  GitBranch,
  Wifi,
  WifiOff,
  Bell,
  Zap,
  Play,
  Square,
  Trash2,
  Copy,
  Edit,
  RotateCcw,
  Download,
  Upload,
  Eye,
  EyeOff,
  Palette,
  Type,
  Code,
  Monitor,
  Smartphone,
  Tablet,
  AlertCircle,
  AlertTriangle,
  Info,
  Check,
  Filter,
  Map,
  Command,
  Folder,
  File,
  Save,
  FolderPlus,
  FilePlus,
  Delete,
  Home,
  Edit3,
  View,
  RefreshCw,
  ExternalLink,
  Minimize2,
  Maximize2,
  CornerDownLeft,
  CornerDownRight,
} from "lucide-react";

// Types and Interfaces
interface FileNode {
  id: string;
  name: string;
  type: 'file' | 'folder';
  path: string;
  children?: FileNode[];
  content?: string;
  modified?: boolean;
  isNew?: boolean;
  gitStatus?: 'modified' | 'added' | 'deleted' | 'untracked';
}

interface OpenFile {
  id: string;
  name: string;
  path: string;
  content: string;
  modified: boolean;
  language: string;
}

interface Terminal {
  id: string;
  name: string;
  type: 'powershell' | 'cmd' | 'bash' | 'git-bash';
  history: string[];
  currentDirectory: string;
}

interface Problem {
  id: string;
  file: string;
  line: number;
  column: number;
  severity: 'error' | 'warning' | 'info';
  message: string;
  code?: string;
  source: string;
}

interface Command {
  id: string;
  title: string;
  category: string;
  shortcut?: string;
  action: () => void;
}

interface SettingsObject {
  [key: string]: any;
}

// Tree Context
interface TreeContextProps {
  selectedId: string | undefined;
  expandedItems: string[] | undefined;
  handleExpand: (id: string) => void;
  selectItem: (id: string) => void;
  indicator: boolean;
  openIcon?: React.ReactNode;
  closeIcon?: React.ReactNode;
  direction: "rtl" | "ltr";
}

const TreeContext = createContext<TreeContextProps | null>(null);

const useTree = () => {
  const context = useContext(TreeContext);
  if (!context) throw new Error("useTree must be used within a TreeProvider");
  return context;
};

// File Explorer Component
const FileExplorer: React.FC<{
  files: FileNode[];
  onFileSelect: (file: FileNode) => void;
  onFileCreate: (path: string, type: 'file' | 'folder') => void;
  onFileDelete: (path: string) => void;
  onFileRename: (oldPath: string, newPath: string) => void;
  selectedFile?: string;
}> = ({ files, onFileSelect, onFileCreate, onFileDelete, onFileRename, selectedFile }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedItems, setExpandedItems] = useState<string[]>([]);

  const filteredFiles = useMemo(() => {
    if (!searchTerm) return files;
    const filterNode = (node: FileNode): FileNode | null => {
      const matches = node.name.toLowerCase().includes(searchTerm.toLowerCase());
      const filteredChildren = node.children?.map(filterNode).filter(Boolean) as FileNode[] || [];
      
      if (matches || filteredChildren.length > 0) {
        return { ...node, children: filteredChildren };
      }
      return null;
    };
    return files.map(filterNode).filter(Boolean) as FileNode[];
  }, [files, searchTerm]);

  const TreeIndicator = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
    <div
      className={cn(
        "absolute left-1.5 h-full w-px rounded-md bg-purple-500/20 py-3 transition-colors hover:bg-purple-500/40",
        className
      )}
      {...props}
    />
  );

  const FileTreeItem: React.FC<{ node: FileNode; level: number }> = ({ node, level }) => {
    const isExpanded = expandedItems.includes(node.id);
    const isSelected = selectedFile === node.id;

    const handleToggle = () => {
      if (node.type === 'folder') {
        setExpandedItems(prev => 
          prev.includes(node.id) 
            ? prev.filter(id => id !== node.id)
            : [...prev, node.id]
        );
      } else {
        onFileSelect(node);
      }
    };

    const getFileIcon = (fileName: string) => {
      const ext = fileName.split('.').pop()?.toLowerCase();
      switch (ext) {
        case 'js': case 'jsx': return <FileCode className="h-4 w-4 text-yellow-500" />;
        case 'ts': case 'tsx': return <FileCode className="h-4 w-4 text-blue-500" />;
        case 'py': return <FileCode className="h-4 w-4 text-green-500" />;
        case 'md': return <FileText className="h-4 w-4 text-gray-500" />;
        case 'json': return <FileCode className="h-4 w-4 text-orange-500" />;
        case 'css': case 'scss': return <FileCode className="h-4 w-4 text-pink-500" />;
        case 'html': return <FileCode className="h-4 w-4 text-red-500" />;
        default: return <FileIcon className="h-4 w-4 text-gray-400" />;
      }
    };

    return (
      <div>
        <div
          className={cn(
            "flex items-center gap-2 px-2 py-1 text-sm cursor-pointer rounded-md transition-all duration-200",
            "hover:bg-purple-500/10 hover:backdrop-blur-sm",
            isSelected && "bg-purple-500/20 text-purple-100 shadow-sm",
            node.modified && "text-purple-300",
            node.isNew && "text-green-400"
          )}
          style={{ paddingLeft: `${level * 12 + 8}px` }}
          onClick={handleToggle}
        >
          {node.type === 'folder' ? (
            isExpanded ? (
              <FolderOpenIcon className="h-4 w-4 text-purple-400" />
            ) : (
              <FolderIcon className="h-4 w-4 text-purple-400" />
            )
          ) : (
            getFileIcon(node.name)
          )}
          <span className="truncate flex-1">{node.name}</span>
          {node.gitStatus && (
            <Badge 
              variant="outline" 
              className={cn(
                "text-xs px-1 py-0",
                node.gitStatus === 'modified' && "border-yellow-500 text-yellow-500",
                node.gitStatus === 'added' && "border-green-500 text-green-500",
                node.gitStatus === 'deleted' && "border-red-500 text-red-500",
                node.gitStatus === 'untracked' && "border-blue-500 text-blue-500"
              )}
            >
              {node.gitStatus.charAt(0).toUpperCase()}
            </Badge>
          )}
        </div>
        {node.type === 'folder' && isExpanded && node.children && (
          <div className="relative">
            <TreeIndicator />
            {node.children.map(child => (
              <FileTreeItem key={child.id} node={child} level={level + 1} />
            ))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="h-full bg-background/80 backdrop-blur-sm border-r border-purple-500/20">
      <div className="p-3 border-b border-purple-500/20">
        <div className="flex items-center gap-2 mb-3">
          <FolderIcon className="h-4 w-4 text-purple-400" />
          <span className="text-sm font-medium text-purple-100">Explorer</span>
        </div>
        <div className="relative">
          <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search files..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-8 bg-purple-500/10 border-purple-500/30 focus:border-purple-500/50"
          />
        </div>
        <div className="flex gap-1 mt-2">
          <Button
            size="sm"
            variant="ghost"
            onClick={() => onFileCreate("", "file")}
            className="h-7 px-2 text-purple-300 hover:text-purple-100 hover:bg-purple-500/20"
          >
            <FilePlus className="h-3 w-3" />
          </Button>
          <Button
            size="sm"
            variant="ghost"
            onClick={() => onFileCreate("", "folder")}
            className="h-7 px-2 text-purple-300 hover:text-purple-100 hover:bg-purple-500/20"
          >
            <FolderPlus className="h-3 w-3" />
          </Button>
        </div>
      </div>
      <ScrollArea className="flex-1">
        <div className="p-2">
          {filteredFiles.map(node => (
            <FileTreeItem key={node.id} node={node} level={0} />
          ))}
        </div>
      </ScrollArea>
    </div>
  );
};

// Editor Tabs Component
const EditorTabs: React.FC<{
  openFiles: OpenFile[];
  activeFile: string;
  onTabSelect: (fileId: string) => void;
  onTabClose: (fileId: string) => void;
  onTabReorder: (fromIndex: number, toIndex: number) => void;
  onSplitView: (orientation: 'horizontal' | 'vertical') => void;
}> = ({ openFiles, activeFile, onTabSelect, onTabClose, onTabReorder, onSplitView }) => {
  const getFileIcon = (fileName: string) => {
    const ext = fileName.split('.').pop()?.toLowerCase();
    switch (ext) {
      case 'js': case 'jsx': return <FileCode className="h-3 w-3 text-yellow-500" />;
      case 'ts': case 'tsx': return <FileCode className="h-3 w-3 text-blue-500" />;
      case 'py': return <FileCode className="h-3 w-3 text-green-500" />;
      case 'md': return <FileText className="h-3 w-3 text-gray-500" />;
      case 'json': return <FileCode className="h-3 w-3 text-orange-500" />;
      case 'css': case 'scss': return <FileCode className="h-3 w-3 text-pink-500" />;
      case 'html': return <FileCode className="h-3 w-3 text-red-500" />;
      default: return <FileIcon className="h-3 w-3 text-gray-400" />;
    }
  };

  return (
    <div className="flex items-center bg-background/80 backdrop-blur-sm border-b border-purple-500/20 overflow-x-auto">
      <ScrollArea orientation="horizontal" className="flex-1">
        <div className="flex">
          {openFiles.map((file) => (
            <div
              key={file.id}
              className={cn(
                "flex items-center gap-2 px-3 py-2 text-sm border-r border-purple-500/20 cursor-pointer transition-all duration-200 min-w-0",
                "hover:bg-purple-500/10",
                activeFile === file.id 
                  ? "bg-purple-500/20 text-purple-100 border-b-2 border-purple-500" 
                  : "text-muted-foreground"
              )}
              onClick={() => onTabSelect(file.id)}
            >
              {getFileIcon(file.name)}
              <span className="truncate max-w-32">{file.name}</span>
              {file.modified && (
                <div className="w-2 h-2 rounded-full bg-purple-400" />
              )}
              <Button
                size="sm"
                variant="ghost"
                onClick={(e) => {
                  e.stopPropagation();
                  onTabClose(file.id);
                }}
                className="h-4 w-4 p-0 hover:bg-purple-500/30"
              >
                <X className="h-3 w-3" />
              </Button>
            </div>
          ))}
        </div>
      </ScrollArea>
      <div className="flex items-center gap-1 px-2">
        <Button
          size="sm"
          variant="ghost"
          onClick={() => onSplitView('horizontal')}
          className="h-7 w-7 p-0 text-purple-300 hover:text-purple-100 hover:bg-purple-500/20"
        >
          <CornerDownRight className="h-3 w-3" />
        </Button>
        <Button
          size="sm"
          variant="ghost"
          onClick={() => onSplitView('vertical')}
          className="h-7 w-7 p-0 text-purple-300 hover:text-purple-100 hover:bg-purple-500/20"
        >
          <CornerDownLeft className="h-3 w-3" />
        </Button>
      </div>
    </div>
  );
};

// Terminal Panel Component
const TerminalPanel: React.FC<{
  terminals: Terminal[];
  activeTerminal: string;
  onTerminalCreate: (type: Terminal['type']) => void;
  onTerminalClose: (id: string) => void;
  onCommand: (terminalId: string, command: string) => void;
  height: number;
  onHeightChange: (height: number) => void;
}> = ({ terminals, activeTerminal, onTerminalCreate, onTerminalClose, onCommand, height, onHeightChange }) => {
  const [command, setCommand] = useState("");
  const activeTerminalData = terminals.find(t => t.id === activeTerminal);

  const handleCommand = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && command.trim()) {
      onCommand(activeTerminal, command);
      setCommand("");
    }
  };

  return (
    <div 
      className="bg-background/90 backdrop-blur-sm border-t border-purple-500/20"
      style={{ height: `${height}px` }}
    >
      <div className="flex items-center justify-between px-3 py-2 border-b border-purple-500/20">
        <div className="flex items-center gap-2">
          <Terminal className="h-4 w-4 text-purple-400" />
          <span className="text-sm font-medium text-purple-100">Terminal</span>
        </div>
        <div className="flex items-center gap-1">
          <Button
            size="sm"
            variant="ghost"
            onClick={() => onTerminalCreate('powershell')}
            className="h-7 px-2 text-purple-300 hover:text-purple-100 hover:bg-purple-500/20"
          >
            <Plus className="h-3 w-3" />
          </Button>
          <Button
            size="sm"
            variant="ghost"
            className="h-7 px-2 text-purple-300 hover:text-purple-100 hover:bg-purple-500/20"
          >
            <Settings className="h-3 w-3" />
          </Button>
        </div>
      </div>
      
      <Tabs value={activeTerminal} className="h-full flex flex-col">
        <TabsList className="w-full justify-start bg-transparent border-b border-purple-500/20 rounded-none">
          {terminals.map((terminal) => (
            <TabsTrigger
              key={terminal.id}
              value={terminal.id}
              className="data-[state=active]:bg-purple-500/20 data-[state=active]:text-purple-100"
            >
              {terminal.name}
              <Button
                size="sm"
                variant="ghost"
                onClick={(e) => {
                  e.stopPropagation();
                  onTerminalClose(terminal.id);
                }}
                className="h-4 w-4 p-0 ml-2 hover:bg-purple-500/30"
              >
                <X className="h-3 w-3" />
              </Button>
            </TabsTrigger>
          ))}
        </TabsList>
        
        <TabsContent value={activeTerminal} className="flex-1 p-3 font-mono text-sm">
          <ScrollArea className="h-full">
            <div className="space-y-1">
              {activeTerminalData?.history.map((line, index) => (
                <div key={index} className="text-green-400">{line}</div>
              ))}
              <div className="flex items-center gap-2">
                <span className="text-purple-400">$</span>
                <Input
                  value={command}
                  onChange={(e) => setCommand(e.target.value)}
                  onKeyDown={handleCommand}
                  className="border-none bg-transparent p-0 focus-visible:ring-0 text-green-400"
                  placeholder="Enter command..."
                />
              </div>
            </div>
          </ScrollArea>
        </TabsContent>
      </Tabs>
    </div>
  );
};

// Status Bar Component
const StatusBar: React.FC<{
  currentFile?: OpenFile;
  cursorPosition: { line: number; column: number };
  selection?: { count: number };
  gitBranch?: string;
  language: string;
  notifications: number;
  aiStatus: 'connected' | 'disconnected' | 'thinking';
}> = ({ currentFile, cursorPosition, selection, gitBranch, language, notifications, aiStatus }) => {
  return (
    <div className="flex items-center justify-between px-3 py-1 bg-purple-900/20 backdrop-blur-sm border-t border-purple-500/20 text-xs">
      <div className="flex items-center gap-4">
        {gitBranch && (
          <div className="flex items-center gap-1 text-purple-300">
            <GitBranch className="h-3 w-3" />
            <span>{gitBranch}</span>
          </div>
        )}
        <span className="text-muted-foreground">UTF-8</span>
        <span className="text-muted-foreground">LF</span>
        <span className="text-purple-300">
          Ln {cursorPosition.line}, Col {cursorPosition.column}
        </span>
        {selection && (
          <span className="text-purple-300">({selection.count} selected)</span>
        )}
      </div>
      
      <div className="flex items-center gap-4">
        <span className="text-purple-300">{language}</span>
        <div className="flex items-center gap-1">
          <Bell className="h-3 w-3 text-purple-400" />
          {notifications > 0 && (
            <Badge variant="destructive" className="h-4 text-xs px-1">
              {notifications}
            </Badge>
          )}
        </div>
        <div className="flex items-center gap-1">
          <Zap className={cn(
            "h-3 w-3",
            aiStatus === 'connected' ? "text-green-400" :
            aiStatus === 'thinking' ? "text-yellow-400" : "text-red-400"
          )} />
          <span className={cn(
            aiStatus === 'connected' ? "text-green-400" :
            aiStatus === 'thinking' ? "text-yellow-400" : "text-red-400"
          )}>
            {aiStatus}
          </span>
        </div>
        <div className="flex items-center gap-1">
          {navigator.onLine ? (
            <Wifi className="h-3 w-3 text-green-400" />
          ) : (
            <WifiOff className="h-3 w-3 text-red-400" />
          )}
        </div>
      </div>
    </div>
  );
};

// Problems Panel Component
const ProblemsPanel: React.FC<{
  problems: Problem[];
  onProblemClick: (problem: Problem) => void;
  filters: { errors: boolean; warnings: boolean; info: boolean };
  onFilterChange: (filters: { errors: boolean; warnings: boolean; info: boolean }) => void;
}> = ({ problems, onProblemClick, filters, onFilterChange }) => {
  const filteredProblems = problems.filter(problem => {
    if (problem.severity === 'error' && !filters.errors) return false;
    if (problem.severity === 'warning' && !filters.warnings) return false;
    if (problem.severity === 'info' && !filters.info) return false;
    return true;
  });

  const getSeverityIcon = (severity: Problem['severity']) => {
    switch (severity) {
      case 'error': return <AlertCircle className="h-4 w-4 text-red-500" />;
      case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case 'info': return <Info className="h-4 w-4 text-blue-500" />;
    }
  };

  const errorCount = problems.filter(p => p.severity === 'error').length;
  const warningCount = problems.filter(p => p.severity === 'warning').length;
  const infoCount = problems.filter(p => p.severity === 'info').length;

  return (
    <div className="h-64 bg-background/80 backdrop-blur-sm border-t border-purple-500/20">
      <div className="flex items-center justify-between px-3 py-2 border-b border-purple-500/20">
        <div className="flex items-center gap-2">
          <AlertCircle className="h-4 w-4 text-purple-400" />
          <span className="text-sm font-medium text-purple-100">Problems</span>
          <Badge variant="outline" className="text-xs">
            {filteredProblems.length}
          </Badge>
        </div>
        <div className="flex items-center gap-1">
          <Button
            size="sm"
            variant={filters.errors ? "default" : "ghost"}
            onClick={() => onFilterChange({ ...filters, errors: !filters.errors })}
            className="h-7 px-2 text-xs"
          >
            <AlertCircle className="h-3 w-3 mr-1 text-red-500" />
            {errorCount}
          </Button>
          <Button
            size="sm"
            variant={filters.warnings ? "default" : "ghost"}
            onClick={() => onFilterChange({ ...filters, warnings: !filters.warnings })}
            className="h-7 px-2 text-xs"
          >
            <AlertTriangle className="h-3 w-3 mr-1 text-yellow-500" />
            {warningCount}
          </Button>
          <Button
            size="sm"
            variant={filters.info ? "default" : "ghost"}
            onClick={() => onFilterChange({ ...filters, info: !filters.info })}
            className="h-7 px-2 text-xs"
          >
            <Info className="h-3 w-3 mr-1 text-blue-500" />
            {infoCount}
          </Button>
        </div>
      </div>
      
      <ScrollArea className="flex-1">
        <div className="p-2 space-y-1">
          {filteredProblems.map((problem) => (
            <div
              key={problem.id}
              className="flex items-start gap-2 p-2 rounded-md hover:bg-purple-500/10 cursor-pointer transition-colors"
              onClick={() => onProblemClick(problem)}
            >
              {getSeverityIcon(problem.severity)}
              <div className="flex-1 min-w-0">
                <div className="text-sm text-foreground">{problem.message}</div>
                <div className="text-xs text-muted-foreground">
                  {problem.file}:{problem.line}:{problem.column} - {problem.source}
                </div>
              </div>
            </div>
          ))}
        </div>
      </ScrollArea>
    </div>
  );
};

// Minimap Component
const Minimap: React.FC<{
  content: string;
  language: string;
  currentLine: number;
  viewport: { start: number; end: number };
  problems: { line: number; severity: 'error' | 'warning' | 'info' }[];
  onNavigate: (line: number) => void;
  width: number;
}> = ({ content, language, currentLine, viewport, problems, onNavigate, width }) => {
  const lines = content.split('\n');
  const lineHeight = 2;
  const totalHeight = lines.length * lineHeight;

  return (
    <div 
      className="bg-background/80 backdrop-blur-sm border-l border-purple-500/20 relative overflow-hidden"
      style={{ width: `${width}px` }}
    >
      <div className="p-2">
        <div className="text-xs text-purple-300 mb-2">Minimap</div>
        <div 
          className="relative bg-muted/20 rounded"
          style={{ height: '300px' }}
        >
          {/* Viewport indicator */}
          <div
            className="absolute left-0 right-0 bg-purple-500/30 border border-purple-500/50"
            style={{
              top: `${(viewport.start / lines.length) * 300}px`,
              height: `${((viewport.end - viewport.start) / lines.length) * 300}px`
            }}
          />
          
          {/* Current line indicator */}
          <div
            className="absolute left-0 right-0 h-0.5 bg-purple-400"
            style={{
              top: `${(currentLine / lines.length) * 300}px`
            }}
          />
          
          {/* Problem indicators */}
          {problems.map((problem, index) => (
            <div
              key={index}
              className={cn(
                "absolute left-0 w-1 h-0.5",
                problem.severity === 'error' && "bg-red-500",
                problem.severity === 'warning' && "bg-yellow-500",
                problem.severity === 'info' && "bg-blue-500"
              )}
              style={{
                top: `${(problem.line / lines.length) * 300}px`
              }}
            />
          ))}
          
          {/* Click handler */}
          <div
            className="absolute inset-0 cursor-pointer"
            onClick={(e) => {
              const rect = e.currentTarget.getBoundingClientRect();
              const y = e.clientY - rect.top;
              const line = Math.floor((y / 300) * lines.length);
              onNavigate(line);
            }}
          />
        </div>
      </div>
    </div>
  );
};

// Command Palette Component
const CommandPalette: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  commands: Command[];
  onCommandExecute: (command: Command) => void;
  recentCommands: Command[];
  placeholder?: string;
}> = ({ isOpen, onClose, commands, onCommandExecute, recentCommands, placeholder = "Type a command or search..." }) => {
  const [search, setSearch] = useState("");

  const filteredCommands = useMemo(() => {
    if (!search) return commands;
    return commands.filter(cmd => 
      cmd.title.toLowerCase().includes(search.toLowerCase()) ||
      cmd.category.toLowerCase().includes(search.toLowerCase())
    );
  }, [commands, search]);

  const groupedCommands = useMemo(() => {
    const groups: Record<string, Command[]> = {};
    filteredCommands.forEach(cmd => {
      if (!groups[cmd.category]) groups[cmd.category] = [];
      groups[cmd.category].push(cmd);
    });
    return groups;
  }, [filteredCommands]);

  return (
    <CommandDialog open={isOpen} onOpenChange={onClose}>
      <CommandInput 
        placeholder={placeholder}
        value={search}
        onValueChange={setSearch}
      />
      <CommandList>
        <CommandEmpty>No commands found.</CommandEmpty>
        
        {recentCommands.length > 0 && !search && (
          <>
            <CommandGroup heading="Recent">
              {recentCommands.slice(0, 5).map((command) => (
                <CommandItem
                  key={command.id}
                  onSelect={() => {
                    onCommandExecute(command);
                    onClose();
                  }}
                >
                  <span>{command.title}</span>
                  {command.shortcut && (
                    <CommandShortcut>{command.shortcut}</CommandShortcut>
                  )}
                </CommandItem>
              ))}
            </CommandGroup>
            <CommandSeparator />
          </>
        )}
        
        {Object.entries(groupedCommands).map(([category, commands]) => (
          <CommandGroup key={category} heading={category}>
            {commands.map((command) => (
              <CommandItem
                key={command.id}
                onSelect={() => {
                  onCommandExecute(command);
                  onClose();
                }}
              >
                <span>{command.title}</span>
                {command.shortcut && (
                  <CommandShortcut>{command.shortcut}</CommandShortcut>
                )}
              </CommandItem>
            ))}
          </CommandGroup>
        ))}
      </CommandList>
    </CommandDialog>
  );
};

// Settings Panel Component
const SettingsPanel: React.FC<{
  settings: SettingsObject;
  onSettingChange: (key: string, value: any) => void;
  onReset: (category?: string) => void;
  onImport: (settings: SettingsObject) => void;
  onExport: () => SettingsObject;
}> = ({ settings, onSettingChange, onReset, onImport, onExport }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [activeCategory, setActiveCategory] = useState("editor");

  const categories = [
    { id: "editor", name: "Editor", icon: <Edit className="h-4 w-4" /> },
    { id: "terminal", name: "Terminal", icon: <Terminal className="h-4 w-4" /> },
    { id: "ai", name: "AI Assistant", icon: <Zap className="h-4 w-4" /> },
    { id: "git", name: "Git", icon: <GitBranch className="h-4 w-4" /> },
    { id: "extensions", name: "Extensions", icon: <Plus className="h-4 w-4" /> },
  ];

  const renderSettingInput = (key: string, value: any, type: string) => {
    switch (type) {
      case 'boolean':
        return (
          <Button
            variant={value ? "default" : "outline"}
            size="sm"
            onClick={() => onSettingChange(key, !value)}
          >
            {value ? "Enabled" : "Disabled"}
          </Button>
        );
      case 'number':
        return (
          <Input
            type="number"
            value={value}
            onChange={(e) => onSettingChange(key, parseInt(e.target.value))}
            className="w-24"
          />
        );
      case 'select':
        return (
          <select
            value={value}
            onChange={(e) => onSettingChange(key, e.target.value)}
            className="px-3 py-1 rounded border bg-background"
          >
            <option value="light">Light</option>
            <option value="dark">Dark</option>
            <option value="auto">Auto</option>
          </select>
        );
      default:
        return (
          <Input
            value={value}
            onChange={(e) => onSettingChange(key, e.target.value)}
            className="flex-1"
          />
        );
    }
  };

  return (
    <div className="h-full bg-background/80 backdrop-blur-sm">
      <div className="flex h-full">
        {/* Categories Sidebar */}
        <div className="w-48 border-r border-purple-500/20 p-3">
          <div className="mb-4">
            <Input
              placeholder="Search settings..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="bg-purple-500/10 border-purple-500/30"
            />
          </div>
          <div className="space-y-1">
            {categories.map((category) => (
              <Button
                key={category.id}
                variant={activeCategory === category.id ? "default" : "ghost"}
                className="w-full justify-start"
                onClick={() => setActiveCategory(category.id)}
              >
                {category.icon}
                <span className="ml-2">{category.name}</span>
              </Button>
            ))}
          </div>
        </div>

        {/* Settings Content */}
        <div className="flex-1 p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-lg font-semibold text-purple-100">
              {categories.find(c => c.id === activeCategory)?.name} Settings
            </h2>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => onReset(activeCategory)}
              >
                <RotateCcw className="h-4 w-4 mr-2" />
                Reset
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  const exported = onExport();
                  navigator.clipboard.writeText(JSON.stringify(exported, null, 2));
                }}
              >
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </div>

          <ScrollArea className="h-96">
            <div className="space-y-4">
              {/* Editor Settings */}
              {activeCategory === "editor" && (
                <>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">Font Size</div>
                      <div className="text-sm text-muted-foreground">Editor font size in pixels</div>
                    </div>
                    {renderSettingInput("editor.fontSize", settings["editor.fontSize"] || 14, "number")}
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">Theme</div>
                      <div className="text-sm text-muted-foreground">Color theme</div>
                    </div>
                    {renderSettingInput("editor.theme", settings["editor.theme"] || "dark", "select")}
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">Word Wrap</div>
                      <div className="text-sm text-muted-foreground">Enable word wrapping</div>
                    </div>
                    {renderSettingInput("editor.wordWrap", settings["editor.wordWrap"] || false, "boolean")}
                  </div>
                </>
              )}

              {/* Terminal Settings */}
              {activeCategory === "terminal" && (
                <>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">Default Shell</div>
                      <div className="text-sm text-muted-foreground">Default terminal shell</div>
                    </div>
                    <Input
                      value={settings["terminal.shell"] || "powershell"}
                      onChange={(e) => onSettingChange("terminal.shell", e.target.value)}
                      className="w-32"
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">Font Family</div>
                      <div className="text-sm text-muted-foreground">Terminal font family</div>
                    </div>
                    <Input
                      value={settings["terminal.fontFamily"] || "Consolas"}
                      onChange={(e) => onSettingChange("terminal.fontFamily", e.target.value)}
                      className="w-32"
                    />
                  </div>
                </>
              )}

              {/* AI Settings */}
              {activeCategory === "ai" && (
                <>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">Model</div>
                      <div className="text-sm text-muted-foreground">AI model selection</div>
                    </div>
                    <Input
                      value={settings["ai.model"] || "gpt-4"}
                      onChange={(e) => onSettingChange("ai.model", e.target.value)}
                      className="w-32"
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">API Key</div>
                      <div className="text-sm text-muted-foreground">OpenAI API key</div>
                    </div>
                    <Input
                      type="password"
                      value={settings["ai.apiKey"] || ""}
                      onChange={(e) => onSettingChange("ai.apiKey", e.target.value)}
                      className="w-48"
                    />
                  </div>
                </>
              )}
            </div>
          </ScrollArea>
        </div>
      </div>
    </div>
  );
};

// Main Monaco IDE Component
const MonacoIDE: React.FC = () => {
  // State management
  const [files] = useState<FileNode[]>([
    {
      id: "1",
      name: "src",
      type: "folder",
      path: "src",
      children: [
        {
          id: "2",
          name: "components",
          type: "folder",
          path: "src/components",
          children: [
            {
              id: "3",
              name: "App.tsx",
              type: "file",
              path: "src/components/App.tsx",
              content: "import React from 'react';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nexport default App;",
              modified: true,
              gitStatus: "modified"
            },
            {
              id: "4",
              name: "Button.tsx",
              type: "file",
              path: "src/components/Button.tsx",
              content: "interface ButtonProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n}\n\nexport const Button: React.FC<ButtonProps> = ({ children, onClick }) => {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n};",
              isNew: true,
              gitStatus: "added"
            }
          ]
        },
        {
          id: "5",
          name: "index.ts",
          type: "file",
          path: "src/index.ts",
          content: "export * from './components/App';\nexport * from './components/Button';",
        }
      ]
    },
    {
      id: "6",
      name: "package.json",
      type: "file",
      path: "package.json",
      content: "{\n  \"name\": \"monaco-ide\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"react\": \"^18.0.0\"\n  }\n}",
    }
  ]);

  const [openFiles, setOpenFiles] = useState<OpenFile[]>([
    {
      id: "3",
      name: "App.tsx",
      path: "src/components/App.tsx",
      content: "import React from 'react';\n\nfunction App() {\n  return <div>Hello World</div>;\n}\n\nexport default App;",
      modified: true,
      language: "typescript"
    }
  ]);

  const [activeFile, setActiveFile] = useState("3");
  const [selectedFile, setSelectedFile] = useState("3");
  const [terminals, setTerminals] = useState<Terminal[]>([
    {
      id: "term1",
      name: "PowerShell",
      type: "powershell",
      history: ["PS C:\\workspace> npm install", "PS C:\\workspace> npm start"],
      currentDirectory: "C:\\workspace"
    }
  ]);
  const [activeTerminal, setActiveTerminal] = useState("term1");
  const [terminalHeight, setTerminalHeight] = useState(200);
  const [commandPaletteOpen, setCommandPaletteOpen] = useState(false);
  const [problems] = useState<Problem[]>([
    {
      id: "1",
      file: "src/components/App.tsx",
      line: 3,
      column: 10,
      severity: "error",
      message: "Type 'string' is not assignable to type 'number'",
      code: "TS2322",
      source: "TypeScript"
    },
    {
      id: "2",
      file: "src/components/Button.tsx",
      line: 8,
      column: 5,
      severity: "warning",
      message: "Unused variable 'props'",
      code: "TS6133",
      source: "TypeScript"
    }
  ]);
  const [problemFilters, setProblemFilters] = useState({
    errors: true,
    warnings: true,
    info: true
  });
  const [cursorPosition] = useState({ line: 1, column: 1 });
  const [settings, setSettings] = useState<SettingsObject>({
    "editor.fontSize": 14,
    "editor.theme": "dark",
    "editor.wordWrap": false,
    "terminal.shell": "powershell",
    "terminal.fontFamily": "Consolas",
    "ai.model": "gpt-4",
    "ai.apiKey": ""
  });

  const commands: Command[] = [
    {
      id: "file.new",
      title: "New File",
      category: "File",
      shortcut: "Ctrl+N",
      action: () => console.log("New file")
    },
    {
      id: "file.open",
      title: "Open File",
      category: "File",
      shortcut: "Ctrl+O",
      action: () => console.log("Open file")
    },
    {
      id: "file.save",
      title: "Save File",
      category: "File",
      shortcut: "Ctrl+S",
      action: () => console.log("Save file")
    },
    {
      id: "edit.format",
      title: "Format Document",
      category: "Edit",
      shortcut: "Shift+Alt+F",
      action: () => console.log("Format document")
    },
    {
      id: "terminal.new",
      title: "New Terminal",
      category: "Terminal",
      shortcut: "Ctrl+`",
      action: () => {
        const newTerminal: Terminal = {
          id: `term${Date.now()}`,
          name: "PowerShell",
          type: "powershell",
          history: [],
          currentDirectory: "C:\\workspace"
        };
        setTerminals(prev => [...prev, newTerminal]);
        setActiveTerminal(newTerminal.id);
      }
    }
  ];

  const [recentCommands] = useState<Command[]>([commands[0], commands[2]]);

  // Event handlers
  const handleFileSelect = (file: FileNode) => {
    setSelectedFile(file.id);
    if (file.type === 'file' && file.content) {
      const existingFile = openFiles.find(f => f.id === file.id);
      if (!existingFile) {
        const newFile: OpenFile = {
          id: file.id,
          name: file.name,
          path: file.path,
          content: file.content,
          modified: false,
          language: file.name.split('.').pop() || 'text'
        };
        setOpenFiles(prev => [...prev, newFile]);
      }
      setActiveFile(file.id);
    }
  };

  const handleTabClose = (fileId: string) => {
    setOpenFiles(prev => prev.filter(f => f.id !== fileId));
    if (activeFile === fileId) {
      const remaining = openFiles.filter(f => f.id !== fileId);
      setActiveFile(remaining.length > 0 ? remaining[0].id : "");
    }
  };

  const handleTerminalCommand = (terminalId: string, command: string) => {
    setTerminals(prev => prev.map(t => 
      t.id === terminalId 
        ? { ...t, history: [...t.history, `PS ${t.currentDirectory}> ${command}`, `Output: ${command}`] }
        : t
    ));
  };

  const handleSettingChange = (key: string, value: any) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        setCommandPaletteOpen(true);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, []);

  return (
    <div className="h-screen bg-gradient-to-br from-purple-900/20 via-background to-purple-800/20 flex flex-col">
      {/* Command Palette */}
      <CommandPalette
        isOpen={commandPaletteOpen}
        onClose={() => setCommandPaletteOpen(false)}
        commands={commands}
        onCommandExecute={(cmd) => cmd.action()}
        recentCommands={recentCommands}
      />

      {/* Main Layout */}
      <ResizablePanelGroup direction="horizontal" className="flex-1">
        {/* File Explorer */}
        <ResizablePanel defaultSize={20} minSize={15} maxSize={40}>
          <FileExplorer
            files={files}
            onFileSelect={handleFileSelect}
            onFileCreate={(path, type) => console.log("Create", type, path)}
            onFileDelete={(path) => console.log("Delete", path)}
            onFileRename={(oldPath, newPath) => console.log("Rename", oldPath, newPath)}
            selectedFile={selectedFile}
          />
        </ResizablePanel>

        <ResizableHandle withHandle />

        {/* Editor Area */}
        <ResizablePanel defaultSize={60} minSize={40}>
          <div className="h-full flex flex-col">
            {/* Editor Tabs */}
            <EditorTabs
              openFiles={openFiles}
              activeFile={activeFile}
              onTabSelect={setActiveFile}
              onTabClose={handleTabClose}
              onTabReorder={(from, to) => console.log("Reorder", from, to)}
              onSplitView={(orientation) => console.log("Split", orientation)}
            />

            {/* Editor Content */}
            <div className="flex-1 bg-background/50 backdrop-blur-sm">
              <ResizablePanelGroup direction="vertical">
                <ResizablePanel defaultSize={70} minSize={30}>
                  <div className="h-full p-4 font-mono text-sm">
                    {openFiles.find(f => f.id === activeFile)?.content || "Select a file to edit"}
                  </div>
                </ResizablePanel>

                <ResizableHandle withHandle />

                {/* Problems Panel */}
                <ResizablePanel defaultSize={30} minSize={20}>
                  <ProblemsPanel
                    problems={problems}
                    onProblemClick={(problem) => console.log("Navigate to", problem)}
                    filters={problemFilters}
                    onFilterChange={setProblemFilters}
                  />
                </ResizablePanel>
              </ResizablePanelGroup>
            </div>

            {/* Terminal */}
            <TerminalPanel
              terminals={terminals}
              activeTerminal={activeTerminal}
              onTerminalCreate={(type) => {
                const newTerminal: Terminal = {
                  id: `term${Date.now()}`,
                  name: type.charAt(0).toUpperCase() + type.slice(1),
                  type,
                  history: [],
                  currentDirectory: "C:\\workspace"
                };
                setTerminals(prev => [...prev, newTerminal]);
                setActiveTerminal(newTerminal.id);
              }}
              onTerminalClose={(id) => {
                setTerminals(prev => prev.filter(t => t.id !== id));
                if (activeTerminal === id) {
                  const remaining = terminals.filter(t => t.id !== id);
                  setActiveTerminal(remaining.length > 0 ? remaining[0].id : "");
                }
              }}
              onCommand={handleTerminalCommand}
              height={terminalHeight}
              onHeightChange={setTerminalHeight}
            />
          </div>
        </ResizablePanel>

        <ResizableHandle withHandle />

        {/* Right Panel - Minimap & Settings */}
        <ResizablePanel defaultSize={20} minSize={15} maxSize={30}>
          <Tabs defaultValue="minimap" className="h-full">
            <TabsList className="w-full bg-purple-500/10 border-b border-purple-500/20">
              <TabsTrigger value="minimap" className="flex-1">
                <Map className="h-4 w-4 mr-2" />
                Minimap
              </TabsTrigger>
              <TabsTrigger value="settings" className="flex-1">
                <Settings className="h-4 w-4 mr-2" />
                Settings
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="minimap" className="h-full">
              <Minimap
                content={openFiles.find(f => f.id === activeFile)?.content || ""}
                language="typescript"
                currentLine={cursorPosition.line}
                viewport={{ start: 1, end: 20 }}
                problems={problems.map(p => ({ line: p.line, severity: p.severity }))}
                onNavigate={(line) => console.log("Navigate to line", line)}
                width={200}
              />
            </TabsContent>
            
            <TabsContent value="settings" className="h-full">
              <SettingsPanel
                settings={settings}
                onSettingChange={handleSettingChange}
                onReset={(category) => console.log("Reset", category)}
                onImport={(settings) => setSettings(settings)}
                onExport={() => settings}
              />
            </TabsContent>
          </Tabs>
        </ResizablePanel>
      </ResizablePanelGroup>

      {/* Status Bar */}
      <StatusBar
        currentFile={openFiles.find(f => f.id === activeFile)}
        cursorPosition={cursorPosition}
        gitBranch="main"
        language="TypeScript"
        notifications={2}
        aiStatus="connected"
      />
    </div>
  );
};

export default MonacoIDE;
