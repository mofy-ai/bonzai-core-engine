"use client";

import React, { useState, useRef, useEffect, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { 
  Send, 
  Mic, 
  Settings, 
  Smile, 
  Paperclip, 
  AtSign, 
  Heart, 
  Rocket, 
  Sparkles, 
  PartyPopper, 
  Flame, 
  Laptop, 
  Target, 
  Star,
  SmilePlus,
  HeartHandshake,
  Eye,
  Zap,
  FileText,
  Code,
  Terminal,
  Globe,
  Brain,
  Users,
  X,
  ChevronDown,
  Volume2,
  VolumeX,
  Loader2
} from "lucide-react";
// Types
interface MentionType {
  type: 'codebase' | 'files' | 'symbols' | 'terminal' | 'docs' | 'web' | 'memory' | 'family';
  icon: React.ReactNode;
  label: string;
  description: string;
}

interface FileAttachment {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
}

interface ChatMessage {
  text: string;
  attachments: FileAttachment[];
  mentions: MentionType[];
  emotions: string[];
  voiceData?: any;
  metadata: any;
}

interface AIModel {
  id: string;
  name: string;
  description: string;
}

interface ChatSettings {
  includeOpenFiles: boolean;
  autoScroll: boolean;
  detailLevel: 'low' | 'medium' | 'high';
  voiceMode: 'push-to-talk' | 'continuous';
  privacyMode: boolean;
}

interface MamaBearChatInputProps {
  onSendMessage?: (message: ChatMessage) => void;
  onFileUpload?: (files: File[]) => void;
  onVoiceInput?: (transcript: string) => void;
  onMentionSelect?: (mention: MentionType, data: any) => void;
  availableModels?: AIModel[];
  currentModel?: AIModel;
  settings?: ChatSettings;
  isLoading?: boolean;
  disabled?: boolean;
}

// Utility function
const cn = (...classes: (string | undefined | null | boolean)[]) => {
  return classes.filter(Boolean).join(' ');
};

// Auto-resize textarea hook
function useAutoResizeTextarea(minHeight: number = 60, maxHeight: number = 200) {
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const adjustHeight = useCallback((reset?: boolean) => {
    const textarea = textareaRef.current;
    if (!textarea) return;

    if (reset) {
      textarea.style.height = `${minHeight}px`;
      return;
    }

    textarea.style.height = `${minHeight}px`;
    const newHeight = Math.max(
      minHeight,
      Math.min(textarea.scrollHeight, maxHeight)
    );
    textarea.style.height = `${newHeight}px`;
  }, [minHeight, maxHeight]);

  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = `${minHeight}px`;
    }
  }, [minHeight]);

  return { textareaRef, adjustHeight };
}

// Voice Input Component
function VoiceInput({ 
  isRecording, 
  onToggleRecording, 
  className 
}: { 
  isRecording: boolean; 
  onToggleRecording: () => void; 
  className?: string;
}) {
  return (
    <div className={cn("flex flex-col items-center gap-2", className)}>
      <motion.button
        onClick={onToggleRecording}
        className={cn(
          "w-12 h-12 rounded-full flex items-center justify-center transition-all",
          isRecording 
            ? "bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg shadow-purple-500/25" 
            : "bg-white/10 backdrop-blur-sm border border-purple-300/30 text-purple-300 hover:bg-purple-500/20"
        )}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        {isRecording ? <VolumeX className="w-5 h-5" /> : <Mic className="w-5 h-5" />}
      </motion.button>
      
      {isRecording && (
        <div className="flex items-center gap-1">
          {[...Array(12)].map((_, i) => (
            <motion.div
              key={i}
              className="w-1 bg-purple-400 rounded-full"
              animate={{
                height: [4, 16, 4],
                opacity: [0.4, 1, 0.4]
              }}
              transition={{
                duration: 1,
                repeat: Infinity,
                delay: i * 0.1
              }}
            />
          ))}
        </div>
      )}
    </div>
  );
}

// Emoji Picker Component
function EmojiPicker({ 
  onEmojiSelect, 
  isOpen, 
  onToggle 
}: { 
  onEmojiSelect: (emoji: string) => void; 
  isOpen: boolean; 
  onToggle: () => void;
}) {
  const quickEmojis = ['💜', '🚀', '✨', '🎉', '🔥', '💻', '🎯', '🌟'];
  const mamaBearEmojis = ['🤗', '😊', '🥰', '😍', '🤩', '💖'];

  return (
    <div className="relative">
      <motion.button
        onClick={onToggle}
        className="p-2 rounded-lg bg-white/10 backdrop-blur-sm border border-purple-300/30 text-purple-300 hover:bg-purple-500/20 transition-all"
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <Smile className="w-4 h-4" />
      </motion.button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 10, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 10, scale: 0.95 }}
            className="absolute bottom-full mb-2 left-0 bg-white/95 backdrop-blur-xl border border-purple-200/50 rounded-xl p-4 shadow-xl min-w-[280px]"
          >
            <div className="space-y-3">
              <div>
                <h4 className="text-xs font-medium text-gray-600 mb-2">Quick Reactions</h4>
                <div className="flex flex-wrap gap-2">
                  {quickEmojis.map((emoji) => (
                    <button
                      key={emoji}
                      onClick={() => onEmojiSelect(emoji)}
                      className="text-lg hover:bg-purple-100 rounded-lg p-1 transition-colors"
                    >
                      {emoji}
                    </button>
                  ))}
                </div>
              </div>
              <div>
                <h4 className="text-xs font-medium text-gray-600 mb-2">Mama Bear Emotions</h4>
                <div className="flex flex-wrap gap-2">
                  {mamaBearEmojis.map((emoji) => (
                    <button
                      key={emoji}
                      onClick={() => onEmojiSelect(emoji)}
                      className="text-lg hover:bg-purple-100 rounded-lg p-1 transition-colors"
                    >
                      {emoji}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

// Mention Dropdown Component
function MentionDropdown({ 
  isOpen, 
  onSelect, 
  searchQuery 
}: { 
  isOpen: boolean; 
  onSelect: (mention: MentionType) => void; 
  searchQuery: string;
}) {
  const mentions: MentionType[] = [
    { type: 'codebase', icon: <Code className="w-4 h-4" />, label: 'Codebase', description: 'Search entire project' },
    { type: 'files', icon: <FileText className="w-4 h-4" />, label: 'Files', description: 'Select specific files/folders' },
    { type: 'symbols', icon: <Target className="w-4 h-4" />, label: 'Symbols', description: 'Find functions, classes, variables' },
    { type: 'terminal', icon: <Terminal className="w-4 h-4" />, label: 'Terminal', description: 'Reference terminal output' },
    { type: 'docs', icon: <FileText className="w-4 h-4" />, label: 'Docs', description: 'Search documentation' },
    { type: 'web', icon: <Globe className="w-4 h-4" />, label: 'Web', description: 'Web search results' },
    { type: 'memory', icon: <Brain className="w-4 h-4" />, label: 'Memory', description: 'Enterprise memory search' },
    { type: 'family', icon: <Users className="w-4 h-4" />, label: 'Family', description: 'Coordinate with AI family members' },
  ];

  const filteredMentions = mentions.filter(mention => 
    mention.label.toLowerCase().includes(searchQuery.toLowerCase())
  );

  if (!isOpen) return null;

  return (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -10 }}
      className="absolute bottom-full mb-2 left-0 right-0 bg-white/95 backdrop-blur-xl border border-purple-200/50 rounded-xl shadow-xl max-h-64 overflow-y-auto z-50"
    >
      {filteredMentions.map((mention) => (
        <button
          key={mention.type}
          onClick={() => onSelect(mention)}
          className="w-full flex items-center gap-3 p-3 hover:bg-purple-50 transition-colors text-left border-b border-gray-100 last:border-b-0"
        >
          <div className="text-purple-500">{mention.icon}</div>
          <div>
            <div className="font-medium text-gray-900">@{mention.label}</div>
            <div className="text-xs text-gray-500">{mention.description}</div>
          </div>
        </button>
      ))}
    </motion.div>
  );
}

// Settings Panel Component
function SettingsPanel({ 
  isOpen, 
  onToggle, 
  settings, 
  onSettingsChange,
  models,
  currentModel,
  onModelChange
}: {
  isOpen: boolean;
  onToggle: () => void;
  settings: ChatSettings;
  onSettingsChange: (settings: ChatSettings) => void;
  models: AIModel[];
  currentModel: AIModel;
  onModelChange: (model: AIModel) => void;
}) {
  return (
    <div className="relative">
      <motion.button
        onClick={onToggle}
        className="p-2 rounded-lg bg-white/10 backdrop-blur-sm border border-purple-300/30 text-purple-300 hover:bg-purple-500/20 transition-all"
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <Settings className="w-4 h-4" />
      </motion.button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 10, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 10, scale: 0.95 }}
            className="absolute bottom-full mb-2 right-0 bg-white/95 backdrop-blur-xl border border-purple-200/50 rounded-xl p-4 shadow-xl min-w-[300px]"
          >
            <div className="space-y-4">
              <div>
                <h4 className="text-sm font-medium text-gray-900 mb-2">AI Model</h4>
                <select 
                  value={currentModel.id}
                  onChange={(e) => {
                    const model = models.find(m => m.id === e.target.value);
                    if (model) onModelChange(model);
                  }}
                  className="w-full p-2 border border-gray-200 rounded-lg text-sm"
                >
                  {models.map(model => (
                    <option key={model.id} value={model.id}>{model.name}</option>
                  ))}
                </select>
              </div>

              <div className="space-y-2">
                <h4 className="text-sm font-medium text-gray-900">Context Settings</h4>
                
                <label className="flex items-center gap-2">
                  <input 
                    type="checkbox" 
                    checked={settings.includeOpenFiles}
                    onChange={(e) => onSettingsChange({...settings, includeOpenFiles: e.target.checked})}
                    className="rounded"
                  />
                  <span className="text-sm text-gray-700">Include open files</span>
                </label>

                <label className="flex items-center gap-2">
                  <input 
                    type="checkbox" 
                    checked={settings.autoScroll}
                    onChange={(e) => onSettingsChange({...settings, autoScroll: e.target.checked})}
                    className="rounded"
                  />
                  <span className="text-sm text-gray-700">Auto-scroll</span>
                </label>

                <label className="flex items-center gap-2">
                  <input 
                    type="checkbox" 
                    checked={settings.privacyMode}
                    onChange={(e) => onSettingsChange({...settings, privacyMode: e.target.checked})}
                    className="rounded"
                  />
                  <span className="text-sm text-gray-700">Privacy mode</span>
                </label>
              </div>

              <div>
                <h4 className="text-sm font-medium text-gray-900 mb-2">Voice Mode</h4>
                <select 
                  value={settings.voiceMode}
                  onChange={(e) => onSettingsChange({...settings, voiceMode: e.target.value as 'push-to-talk' | 'continuous'})}
                  className="w-full p-2 border border-gray-200 rounded-lg text-sm"
                >
                  <option value="push-to-talk">Push to Talk</option>
                  <option value="continuous">Continuous</option>
                </select>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}

// File Upload Area Component
function FileUploadArea({ 
  files, 
  onFilesChange, 
  onRemoveFile 
}: { 
  files: FileAttachment[]; 
  onFilesChange: (files: File[]) => void; 
  onRemoveFile: (id: string) => void;
}) {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isDragging, setIsDragging] = useState(false);

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    const droppedFiles = Array.from(e.dataTransfer.files);
    onFilesChange(droppedFiles);
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = Array.from(e.target.files || []);
    onFilesChange(selectedFiles);
  };

  return (
    <div className="space-y-2">
      <input
        ref={fileInputRef}
        type="file"
        multiple
        className="hidden"
        onChange={handleFileSelect}
        accept=".js,.ts,.py,.md,.json,.css,.html,.txt,image/*"
      />

      <motion.button
        onClick={() => fileInputRef.current?.click()}
        onDragOver={(e) => { e.preventDefault(); setIsDragging(true); }}
        onDragLeave={() => setIsDragging(false)}
        onDrop={handleDrop}
        className={cn(
          "p-2 rounded-lg bg-white/10 backdrop-blur-sm border border-purple-300/30 text-purple-300 hover:bg-purple-500/20 transition-all",
          isDragging && "border-purple-500 bg-purple-500/20"
        )}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <Paperclip className="w-4 h-4" />
      </motion.button>

      {files.length > 0 && (
        <div className="flex flex-wrap gap-2">
          {files.map((file) => (
            <motion.div
              key={file.id}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              className="flex items-center gap-2 bg-white/90 backdrop-blur-sm rounded-lg px-3 py-2 text-sm"
            >
              <span className="text-gray-700">{file.name}</span>
              <button
                onClick={() => onRemoveFile(file.id)}
                className="text-gray-400 hover:text-red-500 transition-colors"
              >
                <X className="w-3 h-3" />
              </button>
            </motion.div>
          ))}
        </div>
      )}
    </div>
  );
}

// Main Component
export function MamaBearChatInput({
  onSendMessage = () => {},
  onFileUpload = () => {},
  onVoiceInput = () => {},
  onMentionSelect = () => {},
  availableModels = [
    { id: 'claude', name: 'Claude', description: 'Anthropic Claude' },
    { id: 'gemini', name: 'Gemini', description: 'Google Gemini' },
    { id: 'gpt4', name: 'GPT-4', description: 'OpenAI GPT-4' },
    { id: 'family', name: 'Family Consensus', description: 'AI Family Decision' }
  ],
  currentModel = { id: 'claude', name: 'Claude', description: 'Anthropic Claude' },
  settings = {
    includeOpenFiles: true,
    autoScroll: true,
    detailLevel: 'medium' as const,
    voiceMode: 'push-to-talk' as const,
    privacyMode: false
  },
  isLoading = false,
  disabled = false
}: MamaBearChatInputProps) {
  const [input, setInput] = useState("");
  const [files, setFiles] = useState<FileAttachment[]>([]);
  const [isRecording, setIsRecording] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [showMentions, setShowMentions] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [mentionQuery, setMentionQuery] = useState("");
  const [currentSettings, setCurrentSettings] = useState(settings);
  const [selectedModel, setSelectedModel] = useState(currentModel);
  const [encouragementMessage, setEncouragementMessage] = useState("");

  const { textareaRef, adjustHeight } = useAutoResizeTextarea(60, 200);

  const encouragementMessages = [
    "You've got this! 💜",
    "Amazing work! 🎉", 
    "Keep going, superstar! ✨",
    "Mama Bear believes in you! 🤗",
    "You're doing great! 🌟"
  ];

  useEffect(() => {
    if (input.includes('@')) {
      const atIndex = input.lastIndexOf('@');
      const query = input.slice(atIndex + 1);
      setMentionQuery(query);
      setShowMentions(true);
    } else {
      setShowMentions(false);
      setMentionQuery("");
    }
  }, [input]);

  const handleSend = () => {
    if (!input.trim() && files.length === 0) return;

    const message: ChatMessage = {
      text: input,
      attachments: files,
      mentions: [],
      emotions: [],
      metadata: {
        model: selectedModel,
        settings: currentSettings,
        timestamp: new Date().toISOString()
      }
    };

    onSendMessage(message);
    
    // Show encouragement
    const randomMessage = encouragementMessages[Math.floor(Math.random() * encouragementMessages.length)];
    setEncouragementMessage(randomMessage);
    setTimeout(() => setEncouragementMessage(""), 3000);

    // Reset form
    setInput("");
    setFiles([]);
    adjustHeight(true);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const handleFileUpload = (newFiles: File[]) => {
    const fileAttachments: FileAttachment[] = newFiles.map(file => ({
      id: Math.random().toString(36),
      name: file.name,
      type: file.type,
      size: file.size,
      url: URL.createObjectURL(file)
    }));
    
    setFiles(prev => [...prev, ...fileAttachments]);
    onFileUpload(newFiles);
  };

  const handleMentionSelect = (mention: MentionType) => {
    const atIndex = input.lastIndexOf('@');
    const newInput = input.slice(0, atIndex) + `@${mention.label} `;
    setInput(newInput);
    setShowMentions(false);
    onMentionSelect(mention, {});
  };

  const handleEmojiSelect = (emoji: string) => {
    setInput(prev => prev + emoji);
    setShowEmojiPicker(false);
  };

  const handleVoiceToggle = () => {
    setIsRecording(!isRecording);
    if (!isRecording) {
      // Start recording logic here
      setTimeout(() => {
        const mockTranscript = "This is a mock voice input transcription";
        onVoiceInput(mockTranscript);
        setInput(prev => prev + mockTranscript);
        setIsRecording(false);
      }, 2000);
    }
  };

  return (
    <div className="w-full max-w-4xl mx-auto p-6">
      {/* Encouragement Message */}
      <AnimatePresence>
        {encouragementMessage && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="mb-4 text-center"
          >
            <div className="inline-block bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 rounded-full text-sm font-medium">
              {encouragementMessage}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Main Input Container */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="relative"
      >
        {/* Glassmorphism Container */}
        <div className="relative bg-white/10 backdrop-blur-xl border border-purple-300/30 rounded-2xl p-6 shadow-2xl">
          {/* Purple Glow Effect */}
          <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl blur-xl -z-10" />
          
          {/* Mention Dropdown */}
          <MentionDropdown 
            isOpen={showMentions}
            onSelect={handleMentionSelect}
            searchQuery={mentionQuery}
          />

          {/* File Upload Area */}
          {files.length > 0 && (
            <div className="mb-4">
              <FileUploadArea 
                files={files}
                onFilesChange={handleFileUpload}
                onRemoveFile={(id) => setFiles(prev => prev.filter(f => f.id !== id))}
              />
            </div>
          )}

          {/* Main Textarea */}
          <div className="relative">
            <textarea
              ref={textareaRef}
              value={input}
              onChange={(e) => {
                setInput(e.target.value);
                adjustHeight();
              }}
              onKeyDown={handleKeyDown}
              placeholder="Ask Mama Bear anything... 💜 (@codebase, @files, @docs, @web)"
              disabled={disabled || isLoading}
              className="w-full bg-transparent border-none outline-none resize-none text-white placeholder-purple-200/70 text-lg leading-relaxed min-h-[60px]"
              style={{ height: '60px' }}
            />

            {/* Loading Indicator */}
            {isLoading && (
              <div className="absolute right-4 top-4">
                <Loader2 className="w-5 h-5 text-purple-300 animate-spin" />
              </div>
            )}
          </div>

          {/* Bottom Controls */}
          <div className="flex items-center justify-between mt-4 pt-4 border-t border-purple-300/20">
            {/* Left Controls */}
            <div className="flex items-center gap-2">
              <FileUploadArea 
                files={[]}
                onFilesChange={handleFileUpload}
                onRemoveFile={() => {}}
              />
              
              <EmojiPicker 
                onEmojiSelect={handleEmojiSelect}
                isOpen={showEmojiPicker}
                onToggle={() => setShowEmojiPicker(!showEmojiPicker)}
              />

              <VoiceInput 
                isRecording={isRecording}
                onToggleRecording={handleVoiceToggle}
              />

              <SettingsPanel 
                isOpen={showSettings}
                onToggle={() => setShowSettings(!showSettings)}
                settings={currentSettings}
                onSettingsChange={setCurrentSettings}
                models={availableModels}
                currentModel={selectedModel}
                onModelChange={setSelectedModel}
              />
            </div>

            {/* Right Controls */}
            <div className="flex items-center gap-2">
              {/* Model Indicator */}
              <div className="text-xs text-purple-200/70 bg-white/10 px-2 py-1 rounded-lg">
                {selectedModel.name}
              </div>

              {/* Send Button */}
              <motion.button
                onClick={handleSend}
                disabled={(!input.trim() && files.length === 0) || disabled || isLoading}
                className={cn(
                  "flex items-center gap-2 px-6 py-3 rounded-xl font-medium transition-all",
                  "bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg shadow-purple-500/25",
                  "hover:shadow-xl hover:shadow-purple-500/30 hover:scale-105",
                  "disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
                )}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Rocket className="w-4 h-4" />
                <span>Send</span>
              </motion.button>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="mt-4 flex flex-wrap gap-2 justify-center"
        >
          {[
            { icon: <Code className="w-3 h-3" />, label: "Generate code" },
            { icon: <Eye className="w-3 h-3" />, label: "Explain selection" },
            { icon: <Zap className="w-3 h-3" />, label: "Fix errors" },
            { icon: <Sparkles className="w-3 h-3" />, label: "Optimize" },
            { icon: <FileText className="w-3 h-3" />, label: "Add docs" },
            { icon: <Target className="w-3 h-3" />, label: "Create tests" }
          ].map((action, index) => (
            <motion.button
              key={action.label}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.3 + index * 0.1 }}
              className="flex items-center gap-1 px-3 py-1.5 bg-white/10 backdrop-blur-sm border border-purple-300/30 rounded-lg text-purple-200 text-xs hover:bg-purple-500/20 transition-all"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              {action.icon}
              <span>{action.label}</span>
            </motion.button>
          ))}
        </motion.div>
      </motion.div>
    </div>
  );
}

// Demo Component
export default function Demo() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);

  const handleSendMessage = (message: ChatMessage) => {
    console.log("Message sent:", message);
    setMessages(prev => [...prev, message]);
  };

  const handleFileUpload = (files: File[]) => {
    console.log("Files uploaded:", files);
  };

  const handleVoiceInput = (transcript: string) => {
    console.log("Voice input:", transcript);
  };

  const handleMentionSelect = (mention: MentionType, data: any) => {
    console.log("Mention selected:", mention, data);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
      <MamaBearChatInput
        onSendMessage={handleSendMessage}
        onFileUpload={handleFileUpload}
        onVoiceInput={handleVoiceInput}
        onMentionSelect={handleMentionSelect}
      />
    </div>
  );
}
