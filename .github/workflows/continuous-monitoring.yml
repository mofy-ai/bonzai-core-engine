name: üìä Continuous System Monitoring
on:
  schedule:
    # Run every 15 minutes during business hours (9 AM - 6 PM UTC)
    - cron: '0,15,30,45 9-18 * * 1-5'
    # Run every hour outside business hours
    - cron: '0 0-8,19-23 * * *'
    # Run every 4 hours on weekends
    - cron: '0 0,4,8,12,16,20 * * 0,6'
  workflow_dispatch:
    inputs:
      monitoring_type:
        description: 'Type of monitoring'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - deep
        - performance
        - security

jobs:
  system-health-monitoring:
    name: üè• System Health Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: üì¶ Install Dependencies
        run: |
          pip install requests python-dotenv
          
      - name: üè• Comprehensive Health Check
        env:
          BONZAI_BACKEND_URL: ${{ secrets.BONZAI_PRODUCTION_URL }}
          MONITORING_TYPE: ${{ github.event.inputs.monitoring_type }}
        run: |
          echo "üè• Running comprehensive health monitoring..."
          
          case ${MONITORING_TYPE:-standard} in
            "deep")
              python PRODUCTION_MASTER_TEST_SUITE.py --monitoring --deep
              ;;
            "performance")
              python run_production_tests.py --performance-monitoring
              ;;
            "security")
              python run_production_tests.py --security-monitoring
              ;;
            *)
              python run_production_tests.py --health-monitoring
              ;;
          esac
          
      - name: üìä Generate Health Report
        id: health
        run: |
          # Parse monitoring results
          if [ -f "health_monitoring_results.json" ]; then
            OVERALL_HEALTH=$(python -c "import json; data=json.load(open('health_monitoring_results.json')); print(data.get('overall_health', 'unknown'))")
            CRITICAL_ISSUES=$(python -c "import json; data=json.load(open('health_monitoring_results.json')); print(len(data.get('critical_issues', [])))")
            RESPONSE_TIME=$(python -c "import json; data=json.load(open('health_monitoring_results.json')); print(data.get('avg_response_time', 'unknown'))")
            
            echo "health=$OVERALL_HEALTH" >> $GITHUB_OUTPUT
            echo "critical_issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
            echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          else
            echo "health=unknown" >> $GITHUB_OUTPUT
            echo "critical_issues=999" >> $GITHUB_OUTPUT
            echo "response_time=unknown" >> $GITHUB_OUTPUT
          fi
          
      - name: üö® Alert on Critical Issues
        if: steps.health.outputs.critical_issues != '0'
        run: |
          echo "üö® CRITICAL ISSUES DETECTED!"
          echo "Critical Issues: ${{ steps.health.outputs.critical_issues }}"
          echo "System Health: ${{ steps.health.outputs.health }}"
          echo "Response Time: ${{ steps.health.outputs.response_time }}"
          
          # Create an issue for critical problems
          echo "Creating GitHub issue for critical system issues..."
          
      - name: üìä Update Status Badge
        run: |
          # This would update a status badge or external monitoring system
          HEALTH="${{ steps.health.outputs.health }}"
          echo "Updating system status: $HEALTH"
          
      - name: üìä Store Monitoring Data
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: monitoring-data-${{ github.run_number }}
          path: |
            health_monitoring_results.json
            performance_metrics.json
            **/monitoring-*.log
          retention-days: 30

  ai-model-performance:
    name: ü§ñ AI Model Performance Check
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: üì¶ Install Dependencies
        run: |
          pip install requests python-dotenv anthropic openai google-generativeai
          
      - name: ü§ñ Test AI Model Performance
        env:
          BONZAI_BACKEND_URL: ${{ secrets.BONZAI_PRODUCTION_URL }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          echo "ü§ñ Testing AI model performance and responsiveness..."
          
          # Run AI model performance tests
          python -c "
          import requests
          import time
          import json
          
          models_to_test = [
              'gemini-2.0-flash-exp',
              'claude-3-5-sonnet', 
              'gpt-4'
          ]
          
          results = {}
          
          for model in models_to_test:
              try:
                  start_time = time.time()
                  response = requests.post(
                      '$BONZAI_BACKEND_URL/api/chat/simple',
                      json={
                          'model': model,
                          'message': 'Health check: respond with OK',
                          'user_id': 'monitoring'
                      },
                      timeout=30
                  )
                  duration = time.time() - start_time
                  
                  if response.status_code == 200:
                      data = response.json()
                      response_text = data.get('response', '')
                      
                      # Check if it's a real response (not mock)
                      is_real = 'OK' in response_text and 'Backend ready' not in response_text
                      
                      results[model] = {
                          'status': 'healthy' if is_real else 'mock_response',
                          'response_time': duration,
                          'response_preview': response_text[:100]
                      }
                  else:
                      results[model] = {
                          'status': 'error',
                          'error_code': response.status_code,
                          'response_time': duration
                      }
              except Exception as e:
                  results[model] = {
                      'status': 'exception',
                      'error': str(e),
                      'response_time': None
                  }
          
          print('AI Model Performance Results:')
          for model, result in results.items():
              print(f'{model}: {result[\"status\"]} ({result.get(\"response_time\", \"N/A\")}s)')
          
          # Save results
          with open('ai_performance_results.json', 'w') as f:
              json.dump(results, f, indent=2)
          "
          
      - name: üìä Upload AI Performance Data
        uses: actions/upload-artifact@v3
        with:
          name: ai-performance-monitoring
          path: ai_performance_results.json

  create-monitoring-issue:
    name: üö® Create Monitoring Issue
    runs-on: ubuntu-latest
    needs: [system-health-monitoring, ai-model-performance]
    if: failure() || needs.system-health-monitoring.outputs.critical_issues != '0'
    steps:
      - name: üö® Create System Alert Issue
        uses: actions/github-script@v6
        with:
          script: |
            const title = `üö® System Alert: Critical Issues Detected - ${new Date().toISOString()}`;
            const body = `
            ## üö® Bonzai System Alert
            
            **Alert Time:** ${new Date().toISOString()}
            **Trigger:** Automated monitoring detected critical issues
            
            ### üìä Health Status
            - **Overall Health:** ${{ needs.system-health-monitoring.outputs.health }}
            - **Critical Issues:** ${{ needs.system-health-monitoring.outputs.critical_issues }}
            - **Response Time:** ${{ needs.system-health-monitoring.outputs.response_time }}
            
            ### üîç Recommended Actions
            1. Check the latest monitoring artifacts for detailed analysis
            2. Verify API key configurations and quotas
            3. Review backend service logs
            4. Consider running manual diagnostics
            
            ### üìä Monitoring Data
            Check the monitoring artifacts attached to this workflow run for detailed performance data.
            
            **Auto-generated by Bonzai Monitoring System**
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['monitoring', 'critical', 'automated']
            });
